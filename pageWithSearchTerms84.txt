The following page is located at the url: http://en.wikipedia.org/wiki/Join-pattern
<!DOCTYPE html>

<html class="client-nojs" dir="ltr" lang="en">
<head>
<meta charset="utf-8"/>
<title>Join-pattern - Wikipedia, the free encyclopedia</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Join-pattern","wgTitle":"Join-pattern","wgCurRevisionId":738351724,"wgRevisionId":738351724,"wgArticleId":37160229,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["CS1 errors: dates","CS1 errors: chapter ignored","Wikipedia articles that are too technical from January 2013","All articles that are too technical","Articles needing expert attention from January 2013","All articles needing expert attention","Articles which use infobox templates with no data rows","Software design patterns","Distributed computing"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Join-pattern","wgRelevantArticleId":37160229,"wgRequestId":"V-BuEgpAIDQAAGrfAzkAAAAM","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgWikibaseItemId":"Q6268981","wgCentralAuthMobileDomain":false,"wgVisualEditorToolbarScrollOffset":0,"wgEditSubmitButtonLabelPublish":false});mw.loader.state({"ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user.cssprefs":"ready","user":"ready","user.options":"loading","user.tokens":"loading","ext.cite.styles":"ready","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.tmh.thumbnail.styles":"ready","ext.wikimediaBadges":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.options",function($,jQuery,require,module){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens",function ( $, jQuery, require, module ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/;

});mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","ext.centralauth.centralautologin","mmv.head","ext.visualEditor.desktopArticleTarget.init","ext.uls.interface","ext.quicksurveys.init","mw.MediaWikiPlayer.loader","mw.PopUpMediaTransform","skins.vector.js"]);});</script>
<link href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cextra-toolbar-buttons%2Cfeatured-articles-links%2CrefToolbar%2Cswitcher%2Cteahouse%2Cwatchlist-notice%7Cext.pygments%2CwikimediaBadges%7Cext.tmh.thumbnail.styles%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector" rel="stylesheet"/>
<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta content="" name="ResourceLoaderDynamicStyles"/>
<link href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector" rel="stylesheet"/>
<meta content="MediaWiki 1.28.0-wmf.20" name="generator"/>
<meta content="origin-when-cross-origin" name="referrer"/>
<link href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Join-pattern" rel="alternate"/>
<link href="/w/index.php?title=Join-pattern&amp;action=edit" rel="alternate" title="Edit this page" type="application/x-wiki"/>
<link href="/w/index.php?title=Join-pattern&amp;action=edit" rel="edit" title="Edit this page"/>
<link href="/static/apple-touch/wikipedia.png" rel="apple-touch-icon"/>
<link href="/static/favicon/wikipedia.ico" rel="shortcut icon"/>
<link href="/w/opensearch_desc.php" rel="search" title="Wikipedia (en)" type="application/opensearchdescription+xml"/>
<link href="//en.wikipedia.org/w/api.php?action=rsd" rel="EditURI" type="application/rsd+xml"/>
<link href="//creativecommons.org/licenses/by-sa/3.0/" rel="copyright"/>
<link href="https://en.wikipedia.org/wiki/Join-pattern" rel="canonical"/>
<link href="//login.wikimedia.org" rel="dns-prefetch"/>
<link href="//meta.wikimedia.org" rel="dns-prefetch"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Join-pattern rootpage-Join-pattern skin-vector action-view feature-page-action-bar-v2"> <div class="noprint" id="mw-page-base"></div>
<div class="noprint" id="mw-head-base"></div>
<div class="mw-body" id="content" role="main">
<a id="top"></a>
<div id="siteNotice"><!-- CentralNotice --></div>
<div class="mw-indicators">
</div>
<h1 class="firstHeading" id="firstHeading" lang="en">Join-pattern</h1>
<div class="mw-body-content" id="bodyContent">
<div id="siteSub">From Wikipedia, the free encyclopedia</div>
<div id="contentSub"></div>
<div class="mw-jump" id="jump-to-nav">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
</div>
<div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="en"><table class="metadata plainlinks ambox ambox-style ambox-technical" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px"><img alt="" data-file-height="48" data-file-width="48" height="40" src="//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png" srcset="//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/60px-Edit-clear.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/80px-Edit-clear.svg.png 2x" width="40"/></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This article <b>may be too <a class="extiw" href="https://en.wiktionary.org/wiki/technical#Adjective" title="wikt:technical">technical</a> for most readers to understand</b>. <span class="hide-when-compact">Please help <a class="external text" href="//en.wikipedia.org/w/index.php?title=Join-pattern&amp;action=edit">improve</a> this article to <a href="/wiki/Wikipedia:Make_technical_articles_understandable" title="Wikipedia:Make technical articles understandable">make it understandable to non-experts</a>, without removing the technical details. The <a href="/wiki/Talk:Join-pattern" title="Talk:Join-pattern">talk page</a> may contain suggestions.</span> <small><i>(January 2013)</i></small> <small class="hide-when-compact"><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></small></span></td>
</tr>
</table>
<table class="infobox vevent" style="width:22em">
<caption class="summary">Join-pattern</caption>
<tr>
<th scope="row"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td><a href="/wiki/Concurrent_computing" title="Concurrent computing">concurrent computing</a>, <a class="mw-redirect" href="/wiki/Distributed_programming" title="Distributed programming">distributed programming</a></td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Software_developer" title="Software developer">Developer</a></th>
<td class="organiser">INRIA <a class="mw-redirect" href="/wiki/Inria" title="Inria">Inria</a></td>
</tr>
<tr>
<td colspan="2" style="text-align:center"></td>
</tr>
<tr>
<th scope="row">Website</th>
<td><a class="external text" href="http://join.inria.fr/" rel="nofollow">Inria Join</a></td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Major <a href="/wiki/Programming_language_implementation" title="Programming language implementation">implementations</a></th>
</tr>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/Join_Java" title="Join Java">Join Java</a>, <a class="mw-redirect" href="/wiki/Polyphonic_C" title="Polyphonic C">Polyphonic C#</a>, <a class="mw-redirect" href="/wiki/Parallel_C" title="Parallel C">Unified Parallel C</a>, <a href="/wiki/C%CF%89" title="Cω">Cω</a>, <a href="/wiki/Joins_(concurrency_library)" title="Joins (concurrency library)">Joins library</a>, <a href="/wiki/Boost_(C%2B%2B_libraries)" title="Boost (C++ libraries)">Boost</a>.</td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Influenced</th>
</tr>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/Join-calculus" title="Join-calculus">Join Calculus</a></td>
</tr>
</table>
<p><b>Join-patterns</b> provides a way to write <a href="/wiki/Concurrent_computing" title="Concurrent computing">concurrent</a>, <a href="/wiki/Parallel_algorithm" title="Parallel algorithm">parallel</a> and <a class="mw-redirect" href="/wiki/Distributed_programming" title="Distributed programming">distributed</a> computer programs by <a href="/wiki/Message_passing" title="Message passing">message passing</a>. Compared to the use of <a href="/wiki/Thread_(computing)" title="Thread (computing)">threads</a> and locks, this is a high level programming model using communication constructs model to abstract the complexity of concurrent environment and to allow <a href="/wiki/Scalability" title="Scalability">scalability</a>. Its focus is on the execution of a <a href="/wiki/Chord_(concurrency)" title="Chord (concurrency)">chord</a> between messages atomically consumed from a group of channels.</p>
<p>This template is based on <a href="/wiki/Join-calculus" title="Join-calculus">join-calculus</a> and use <a href="/wiki/Pattern_matching" title="Pattern matching">pattern matching</a>. Concretely, this is done by allowing the join definition of several functions and/or channels by matching concurrent call and messages patterns. It is a type of <a href="/wiki/Concurrency_pattern" title="Concurrency pattern">concurrency pattern</a> pattern because it makes easier and more flexible for these entities to communicate and deal with the multi-threaded programming paradigm.</p>
<p></p>
<div class="toc" id="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#History"><span class="tocnumber">2</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#.CF.80-calculus_-_1992"><span class="tocnumber">2.1</span> <span class="toctext">π-calculus - 1992</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Join-Calculus_-_1993"><span class="tocnumber">2.2</span> <span class="toctext">Join-Calculus - 1993</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Distributed_Join-Calculus_-_1996"><span class="tocnumber">2.3</span> <span class="toctext">Distributed Join-Calculus - 1996</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#JoCaml.2C_Funnel_and_Join_Java_-_2000"><span class="tocnumber">2.4</span> <span class="toctext">JoCaml, Funnel and Join Java - 2000</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Polyphonic_C.23_-_2002"><span class="tocnumber">2.5</span> <span class="toctext">Polyphonic C# - 2002</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#C.CF.89_-_2003"><span class="tocnumber">2.6</span> <span class="toctext">Cω - 2003</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Scala_Joins_-_2007"><span class="tocnumber">2.7</span> <span class="toctext">Scala Joins - 2007</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#JErlang_-_2009"><span class="tocnumber">2.8</span> <span class="toctext">JErlang - 2009</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="#Join-pattern_in_classic_programming_literature"><span class="tocnumber">3</span> <span class="toctext">Join-pattern in classic programming literature</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="#Fundamental_features_and_concepts"><span class="tocnumber">4</span> <span class="toctext">Fundamental features and concepts</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="#Application_domain"><span class="tocnumber">5</span> <span class="toctext">Application domain</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="#Mobile_agent"><span class="tocnumber">5.1</span> <span class="toctext">Mobile agent</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Compilation"><span class="tocnumber">5.2</span> <span class="toctext">Compilation</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="#Implementations_and_libraries"><span class="tocnumber">6</span> <span class="toctext">Implementations and libraries</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="#Join_Java"><span class="tocnumber">6.1</span> <span class="toctext">Join Java</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#JErlang"><span class="tocnumber">6.2</span> <span class="toctext">JErlang</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#C.2B.2B"><span class="tocnumber">6.3</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#C.23"><span class="tocnumber">6.4</span> <span class="toctext">C#</span></a>
<ul>
<li class="toclevel-3 tocsection-21"><a href="#Polyphonic_C.23"><span class="tocnumber">6.4.1</span> <span class="toctext">Polyphonic C#</span></a></li>
<li class="toclevel-3 tocsection-22"><a href="#MC.23"><span class="tocnumber">6.4.2</span> <span class="toctext">MC#</span></a></li>
<li class="toclevel-3 tocsection-23"><a href="#Parallel_C.23"><span class="tocnumber">6.4.3</span> <span class="toctext">Parallel C#</span></a></li>
<li class="toclevel-3 tocsection-24"><a href="#C.CF.89"><span class="tocnumber">6.4.4</span> <span class="toctext">Cω</span></a></li>
<li class="toclevel-3 tocsection-25"><a href="#Scalable_Join_Patterns"><span class="tocnumber">6.4.5</span> <span class="toctext">Scalable Join Patterns</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-26"><a href="#JoCaml"><span class="tocnumber">6.5</span> <span class="toctext">JoCaml</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="#Hume"><span class="tocnumber">6.6</span> <span class="toctext">Hume</span></a></li>
<li class="toclevel-2 tocsection-28"><a href="#Visual_Basic"><span class="tocnumber">6.7</span> <span class="toctext">Visual Basic</span></a>
<ul>
<li class="toclevel-3 tocsection-29"><a href="#Concurrent_Basic_-_CB"><span class="tocnumber">6.7.1</span> <span class="toctext">Concurrent Basic - CB</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-30"><a href="#Joins_library_.28C.23_and_VB.29"><span class="tocnumber">6.8</span> <span class="toctext">Joins library (C# and VB)</span></a></li>
<li class="toclevel-2 tocsection-31"><a href="#Scala"><span class="tocnumber">6.9</span> <span class="toctext">Scala</span></a></li>
<li class="toclevel-2 tocsection-32"><a href="#Scheme"><span class="tocnumber">6.10</span> <span class="toctext">Scheme</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-33"><a href="#Other_similar_design_patterns"><span class="tocnumber">7</span> <span class="toctext">Other similar design patterns</span></a></li>
<li class="toclevel-1 tocsection-34"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-35"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-36"><a href="#Notes"><span class="tocnumber">10</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-37"><a href="#External_links"><span class="tocnumber">11</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Description">Description</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=1" title="Edit section: Description">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The join-pattern (or a chord in <a href="/wiki/C%CF%89" title="Cω">Cω</a>) is like a super pipeline with synchronisation and matching. In fact, this concept is summarise by match and join a set of message available from different <a href="/wiki/Message_queue" title="Message queue">message queues</a>, then handles them all simultaneously with one handler.<sup class="reference" id="cite_ref-Join_CalculusB_1-0"><a href="#cite_note-Join_CalculusB-1">[1]</a></sup> It could be represented by the keywords <code class="mw-highlight" dir="ltr" id="" style="">when</code> to specify the first communication that we expected, with the <code class="mw-highlight" dir="ltr" id="" style="">and</code> to join/pair other channels and the <code class="mw-highlight" dir="ltr" id="" style="">do</code> to run some tasks with the different collected messages. A constructed join pattern typically takes this form:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">a1</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">a2</span><span class="p">).</span> <span class="p">...</span> <span class="p">.</span><span class="n">And</span><span class="p">(</span><span class="n">an</span><span class="p">).</span><span class="n">Do</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</pre></div>
<p><i>Argument a1 of When(a1) may be a synchronous or asynchronous channel or an array of asynchronous channels. Each subsequent argument ai to And(ai) (for i &gt; 1) must be an asynchronous channel.</i> <sup class="reference" id="cite_ref-2"><a href="#cite_note-2">[2]</a></sup></p>
<p>More precisely, when a message matches with a chain of linked patterns causes its <i>handler</i> to run (in a new thread if it's in asynchronous context) otherwise the message is queued until one of its patterns is enabled; if there are several matches, an unspecified pattern is selected.<sup class="reference" id="cite_ref-Join_CalculusA_3-0"><a href="#cite_note-Join_CalculusA-3">[3]</a></sup> <i>Unlike an event handler, which services one of several alternative events at a time, in conjunction with all other handlers on that event, a join pattern waits for a conjunction of channels and competes for execution with any other enabled pattern.</i><sup class="reference" id="cite_ref-4"><a href="#cite_note-4">[4]</a></sup></p>
<div class="center">
<div class="thumb tnone">
<div class="thumbinner" style="width:498px;"><a class="image" href="/wiki/File:JoinPatternFlowDiagram.png"><img alt="" class="thumbimage" data-file-height="676" data-file-width="496" height="676" src="//upload.wikimedia.org/wikipedia/commons/2/22/JoinPatternFlowDiagram.png" width="496"/></a>
<div class="thumbcaption">This flow diagram shows how the join pattern is executed by a general match with different channels (wait a chord) and synchronizes the resources (free or lock).</div>
</div>
</div>
</div>
<p>Join-pattern is defined by a set of pi-calculus channels x that supports two different operations, sending and receiving, we need two join calculus names to implement it: a channel name x for sending (a message), and a function name x for receiving a value (a request). The meaning of the join definition is that a call to x() returns a value that was sent on an channel x&lt;&gt;. More interestingly, is that each time functions are concurrently, triggers the return process and synchronizes with other joins.<sup class="reference" id="cite_ref-5"><a href="#cite_note-5">[5]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">J</span> <span class="o">::=</span> <span class="c1">//join patterns</span>
<span class="err">|</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">y</span><span class="o">&gt;</span> <span class="c1">//message send pattern</span>
<span class="err">|</span> <span class="n">x</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="c1">//function call pattern</span>
<span class="err">|</span> <span class="n">J</span> <span class="err">|</span> <span class="n">JBIS</span> <span class="c1">//synchronization</span>
</pre></div>
<blockquote class="templatequote">
<p>From a client’s perspective, a channel just declares a method of the same name and signature. The client posts a message or issues a request by invoking the channel as a method. A continuation method must wait until/unless a single request or message has arrived on each of the channels following the continuation’s When clause. If the continuation gets to run, the arguments of each channel invocation are dequeued (thus consumed) and transferred (atomically) to the continuation’s parameters. <i><sup class="reference" id="cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-0"><a href="#cite_note-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo-6">[6]</a></sup></i></p>
</blockquote>
<div class="center">
<div class="thumb tnone">
<div class="thumbinner" style="width:573px;"><a class="image" href="/wiki/File:JoinPatternClassDiagram.png"><img alt="" class="thumbimage" data-file-height="253" data-file-width="571" height="253" src="//upload.wikimedia.org/wikipedia/commons/b/be/JoinPatternClassDiagram.png" width="571"/></a>
<div class="thumbcaption">Class diagram of the Join pattern</div>
</div>
</div>
</div>
<p>In most of cases, the order of synchronous calls is not guaranteed for performance reasons. Finally, during the match the messages available in the queue could be stolen by some intervening thread; indeed, the awakened thread may have to wait again.<sup class="reference" id="cite_ref-7"><a href="#cite_note-7">[7]</a></sup></p>
<h2><span class="mw-headline" id="History">History</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=2" title="Edit section: History">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id=".CF.80-calculus_-_1992">π-calculus - 1992</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=3" title="Edit section: π-calculus - 1992">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The <a href="/wiki/%CE%A0-calculus" title="Π-calculus">π-calculus</a> belongs to the family of <a class="mw-redirect" href="/wiki/Process_calculi" title="Process calculi">process calculi</a>, allows mathematical formalisms for describing and analyzing properties of concurrent computation by using channel names to be communicated along the channels themselves, and in this way it is able to describe concurrent computations whose network configuration may change during the computation.</p>
<h3><span class="mw-headline" id="Join-Calculus_-_1993">Join-Calculus - 1993</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=4" title="Edit section: Join-Calculus - 1993">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Join patterns first appeared in Fournet and Gonthier’s foundational join calculus, an asynchronous process algebra designed for efficient implementation in a distributed setting.<sup class="reference" id="cite_ref-8"><a href="#cite_note-8">[8]</a></sup> The <a href="/wiki/Join-calculus" title="Join-calculus">join-calculus</a> is a <a href="/wiki/Process_calculus" title="Process calculus">process calculus</a> as expressive as the full <a href="/wiki/%CE%A0-calculus" title="Π-calculus">π-calculus</a>. It was developed to provide a formal basis for the design of distributed programming languages, and therefore intentionally avoids communications constructs found in other process calculi, such as <a class="mw-redirect" href="/wiki/Synchronous_rendezvous" title="Synchronous rendezvous">rendezvous</a> communications.</p>
<h3><span class="mw-headline" id="Distributed_Join-Calculus_-_1996">Distributed Join-Calculus - 1996</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=5" title="Edit section: Distributed Join-Calculus - 1996">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The Join-Calculus is both a name passing calculus and a core language for concurrent and distributed programming.<sup class="reference" id="cite_ref-Compiling_Join-Patterns_9-0"><a href="#cite_note-Compiling_Join-Patterns-9">[9]</a></sup> That's why the Distributed Join-Calculus <sup class="reference" id="cite_ref-mobileagents_10-0"><a href="#cite_note-mobileagents-10">[10]</a></sup> based on the Join-Calculus with the <a href="/wiki/Distributed_computing" title="Distributed computing">distributed programming</a> was created on 1996. This work use the mobile agents where agents are not only programs but core images of running processes with their communication capabilities.</p>
<h3><span class="mw-headline" id="JoCaml.2C_Funnel_and_Join_Java_-_2000">JoCaml, Funnel and Join Java - 2000</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=6" title="Edit section: JoCaml, Funnel and Join Java - 2000">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a class="external text" href="http://jocaml.inria.fr/" rel="nofollow">JoCaml</a> <sup class="reference" id="cite_ref-11"><a href="#cite_note-11">[11]</a></sup><sup class="reference" id="cite_ref-12"><a href="#cite_note-12">[12]</a></sup> and Funnel <sup class="reference" id="cite_ref-13"><a href="#cite_note-13">[13]</a></sup><sup class="reference" id="cite_ref-14"><a href="#cite_note-14">[14]</a></sup> are functional languages supporting declarative join patterns. They present the ideas to direct implement a process calculi in a functional setting.</p>
<p>Another extensions to (non-generic) Java, <a href="/wiki/Join_Java" title="Join Java">JoinJava</a>, were independently proposed by von Itzstein and Kearney.<sup class="reference" id="cite_ref-15"><a href="#cite_note-15">[15]</a></sup></p>
<h3><span class="mw-headline" id="Polyphonic_C.23_-_2002">Polyphonic C# - 2002</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=7" title="Edit section: Polyphonic C# - 2002">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Cardelli, Benton and Fournet proposed an object-oriented version of join patterns for C# called <a class="mw-redirect" href="/wiki/Polyphonic_C_sharp" title="Polyphonic C sharp">Polyphonic C#</a>.<sup class="reference" id="cite_ref-16"><a href="#cite_note-16">[16]</a></sup></p>
<h3><span class="mw-headline" id="C.CF.89_-_2003">Cω - 2003</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=8" title="Edit section: Cω - 2003">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Cω is adaptation of join-calculus to an object-oriented setting.<sup class="reference" id="cite_ref-17"><a href="#cite_note-17">[17]</a></sup> This variant of Polyphonic C# was included in the public release of Cω (a.k.a. Comega) in 2004.</p>
<h3><span class="mw-headline" id="Scala_Joins_-_2007">Scala Joins - 2007</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=9" title="Edit section: Scala Joins - 2007">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a class="external text" href="http://lampwww.epfl.ch/~phaller/joins/index.html" rel="nofollow">Scala Joins</a> is a library to use Join-Pattern with Scala in the context of extensible pattern matching in order to integrate joins into an existing actor-based concurrency framework.</p>
<h3><span class="mw-headline" id="JErlang_-_2009">JErlang - 2009</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=10" title="Edit section: JErlang - 2009">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a> is a language which natively supports the concurrent, real time and distributed paradigm. Concurrency between processes was complex, that's why the project build a new language, <a class="external text" href="http://www.doc.ic.ac.uk/~susan/jerlang/" rel="nofollow">JErlang</a> (<i>J</i> stands for <i>Join</i>) using based on the Join-calculus.</p>
<h2><span class="mw-headline" id="Join-pattern_in_classic_programming_literature">Join-pattern in classic programming literature</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=11" title="Edit section: Join-pattern in classic programming literature">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>"Join-patterns can be used to easily encode related concurrency idioms like actors and active objects." <sup class="reference" id="cite_ref-18"><a href="#cite_note-18">[18]</a></sup></p>
<ul>
<li><a href="/wiki/Barrier_(computer_science)" title="Barrier (computer science)">Barriers</a> <sup class="reference" id="cite_ref-Scalable_Join_Patterns_19-0"><a href="#cite_note-Scalable_Join_Patterns-19">[19]</a></sup></li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">SymmetricBarrier</span> <span class="p">{</span>
<span class="k">public</span> <span class="k">readonly</span> <span class="n">Synchronous</span><span class="p">.</span><span class="n">Channel</span> <span class="n">Arrive</span><span class="p">;</span>
<span class="k">public</span> <span class="nf">SymmetricBarrier</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// create j and init channels (elided)</span>
    <span class="kt">var</span> <span class="n">pat</span> <span class="p">=</span> <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">Arrive</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="n">pat</span> <span class="p">=</span> <span class="n">pat</span><span class="p">.</span><span class="n">And</span><span class="p">(</span><span class="n">Arrive</span><span class="p">);</span>
    <span class="n">pat</span><span class="p">.</span><span class="n">Do</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="p">});</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></div>
<ul>
<li><a href="/wiki/Dining_philosophers_problem" title="Dining philosophers problem">Dining philosophers problem</a> <sup class="reference" id="cite_ref-20"><a href="#cite_note-20">[20]</a></sup></li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kt">var</span> <span class="n">j</span> <span class="p">=</span> <span class="n">Join</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
<span class="n">Synchronous</span><span class="p">.</span><span class="n">Channel</span><span class="p">[]</span> <span class="n">hungry</span><span class="p">;</span>
<span class="n">Asynchronous</span><span class="p">.</span><span class="n">Channel</span><span class="p">[]</span> <span class="n">chopstick</span><span class="p">;</span>
<span class="n">j</span><span class="p">.</span><span class="n">Init</span><span class="p">(</span><span class="k">out</span> <span class="n">hungry</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span> <span class="n">j</span><span class="p">.</span><span class="n">Init</span><span class="p">(</span><span class="k">out</span> <span class="n">chopstick</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
    <span class="kt">var</span> <span class="n">left</span> <span class="p">=</span> <span class="n">chopstick</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="kt">var</span> <span class="n">right</span> <span class="p">=</span> <span class="n">chopstick</span><span class="p">[(</span><span class="n">i</span><span class="p">+</span><span class="m">1</span><span class="p">)</span> <span class="p">%</span> <span class="n">n</span><span class="p">];</span>
    <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">hungry</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="n">And</span><span class="p">(</span><span class="n">left</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">right</span><span class="p">).</span><span class="n">Do</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="n">eat</span><span class="p">();</span> <span class="n">left</span><span class="p">();</span> <span class="n">right</span><span class="p">();</span> <span class="c1">// replace chopsticks</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></div>
<ul>
<li><a href="/wiki/Mutual_exclusion" title="Mutual exclusion">Mutual exclusion</a> <sup class="reference" id="cite_ref-research.microsoft.com_21-0"><a href="#cite_note-research.microsoft.com-21">[21]</a></sup></li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">Lock</span> <span class="p">{</span>
<span class="k">public</span> <span class="k">readonly</span> <span class="n">Synchronous</span><span class="p">.</span><span class="n">Channel</span> <span class="n">Acquire</span><span class="p">;</span>
<span class="k">public</span> <span class="k">readonly</span> <span class="n">Asynchronous</span><span class="p">.</span><span class="n">Channel</span> <span class="n">Release</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">Lock</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// create j and init channels (elided)</span>
        <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">Acquire</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">Release</span><span class="p">).</span><span class="n">Do</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="p">});</span>
        <span class="n">Release</span><span class="p">();</span> <span class="c1">// initially free</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<ul>
<li><a class="mw-redirect" href="/wiki/Producer-consumer_problem" title="Producer-consumer problem">Producers/Consumers</a> <sup class="reference" id="cite_ref-22"><a href="#cite_note-22">[22]</a></sup></li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">Buffer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
<span class="k">public</span> <span class="k">readonly</span> <span class="n">Asynchronous</span><span class="p">.</span><span class="n">Channel</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Put</span><span class="p">;</span>
<span class="k">public</span> <span class="k">readonly</span> <span class="n">Synchronous</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">Channel</span> <span class="n">Get</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">Buffer</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Join</span> <span class="n">j</span> <span class="p">=</span> <span class="n">Join</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span> <span class="c1">// allocate a Join object</span>
        <span class="n">j</span><span class="p">.</span><span class="n">Init</span><span class="p">(</span><span class="k">out</span> <span class="n">Put</span><span class="p">);</span>
        <span class="c1">// bind its channels</span>
        <span class="n">j</span><span class="p">.</span><span class="n">Init</span><span class="p">(</span><span class="k">out</span> <span class="n">Get</span><span class="p">);</span>
        <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">Get</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">Put</span><span class="p">).</span><span class="n">Do</span> <span class="c1">// register chord</span>
        <span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">t</span><span class="p">;</span> <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<ul>
<li><a href="/wiki/Readers%E2%80%93writer_lock" title="Readers–writer lock">Reader-writer locking</a> <sup class="reference" id="cite_ref-Scalable_Join_Patterns_19-1"><a href="#cite_note-Scalable_Join_Patterns-19">[19]</a></sup></li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">ReaderWriterLock</span> <span class="p">{</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">Asynchronous</span><span class="p">.</span><span class="n">Channel</span> <span class="n">idle</span><span class="p">;</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">Asynchronous</span><span class="p">.</span><span class="n">Channel</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">shared</span><span class="p">;</span>
<span class="k">public</span> <span class="k">readonly</span> <span class="n">Synchronous</span><span class="p">.</span><span class="n">Channel</span> <span class="n">AcqR</span><span class="p">,</span> <span class="n">AcqW</span><span class="p">,</span>
<span class="n">RelR</span><span class="p">,</span> <span class="n">RelW</span><span class="p">;</span>
<span class="k">public</span> <span class="nf">ReaderWriterLock</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// create j and init channels (elided)</span>
    <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">AcqR</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">idle</span><span class="p">).</span><span class="n">Do</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">shared</span><span class="p">(</span><span class="m">1</span><span class="p">));</span>
    <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">AcqR</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">shared</span><span class="p">).</span><span class="n">Do</span><span class="p">(</span><span class="n">n</span> <span class="p">=&gt;</span> <span class="n">shared</span><span class="p">(</span><span class="n">n</span><span class="p">+</span><span class="m">1</span><span class="p">));</span>
    <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">RelR</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">shared</span><span class="p">).</span><span class="n">Do</span><span class="p">(</span><span class="n">n</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span> <span class="n">idle</span><span class="p">();</span> <span class="k">else</span> <span class="n">shared</span><span class="p">(</span><span class="n">n</span><span class="p">-</span><span class="m">1</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">AcqW</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">idle</span><span class="p">).</span><span class="n">Do</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="p">});</span>
    <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">RelW</span><span class="p">).</span><span class="n">Do</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">idle</span><span class="p">());</span>
    <span class="n">idle</span><span class="p">();</span> <span class="c1">// initially free</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></div>
<ul>
<li><a href="/wiki/Semaphore_(programming)" title="Semaphore (programming)">Semaphores</a> <sup class="reference" id="cite_ref-research.microsoft.com_21-1"><a href="#cite_note-research.microsoft.com-21">[21]</a></sup></li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">Semaphore</span> <span class="p">{</span>
<span class="k">public</span> <span class="k">readonly</span> <span class="n">Synchronous</span><span class="p">.</span><span class="n">Channel</span> <span class="n">Acquire</span><span class="p">;</span>
<span class="k">public</span> <span class="k">readonly</span> <span class="n">Asynchronous</span><span class="p">.</span><span class="n">Channel</span> <span class="n">Release</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">Semaphore</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// create j and init channels (elided)</span>
        <span class="n">j</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">Acquire</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">Release</span><span class="p">).</span><span class="n">Do</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="p">});</span>
        <span class="k">for</span> <span class="p">(;</span> <span class="n">n</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">;</span> <span class="n">n</span><span class="p">--)</span> <span class="n">Release</span><span class="p">();</span> <span class="c1">// initially n free</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<h2><span class="mw-headline" id="Fundamental_features_and_concepts">Fundamental features and concepts</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=12" title="Edit section: Fundamental features and concepts">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="/wiki/Join-calculus" title="Join-calculus">Join-calculus</a> : The first apparition of the Join-Pattern comes out with this process calculus.</li>
<li><a href="/wiki/Message_passing" title="Message passing">Message passing</a> : Join-pattern works with a message passing system for parallel reason.</li>
<li><a href="/wiki/Channel_I/O" title="Channel I/O">Channel</a> : Channels are used to synchronize and pass messages between concurrently executing threads.In general, a channel may be involved in more than one join pattern, each pattern defines a different continuation that may run when the channel is invoked .<sup class="reference" id="cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-1"><a href="#cite_note-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo-6">[6]</a></sup></li>
<li><a class="mw-redirect" href="/wiki/Synchronous_I/O" title="Synchronous I/O">Synchronous</a> : The join-pattern could use a synchronous channel which return a result. The continuation of a synchronous pattern runs in the thread of the synchronous sender. <sup class="reference" id="cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-2"><a href="#cite_note-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo-6">[6]</a></sup></li>
<li><a href="/wiki/Asynchronous_I/O" title="Asynchronous I/O">Asynchronous</a> : It could also use an asynchronous channel which return no result but take arguments. The continuation of an asynchronous pattern runs in a newly spawned thread. A join pattern may be purely asynchronous, provided its continuation is a subroutine and its When clause only lists asynchronous channels. <sup class="reference" id="cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-3"><a href="#cite_note-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo-6">[6]</a></sup></li>
<li>Combine synchronous and asynchronous : Merging the declarations of synchronous and asynchronous buffer would yield a module that supports the two communication type of consumers.<sup class="reference" id="cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-4"><a href="#cite_note-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo-6">[6]</a></sup></li>
<li><a href="/wiki/Scheduling_(computing)" title="Scheduling (computing)">Scheduler</a> : There is a scheduling between join patterns (e.g. <a href="/wiki/Round-robin_tournament" title="Round-robin tournament">a round-robin scheduler</a>, first-match scheduler). <sup class="reference" id="cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-5"><a href="#cite_note-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo-6">[6]</a></sup></li>
<li><a href="/wiki/Software_design_pattern" title="Software design pattern">Design patterns</a> : The join-pattern is first of all a behavioral and a concurrency pattern.</li>
<li><a class="mw-redirect" href="/wiki/Concurrent_programming" title="Concurrent programming">Concurrent programming</a> : It's execute in a concurrent way.</li>
<li><a href="/wiki/Pattern_matching" title="Pattern matching">Pattern matching</a> : The join-pattern works with matching tasks.</li>
<li><a class="mw-redirect" href="/wiki/Parallel_programming" title="Parallel programming">Parallel programming</a> : It performs tasks in parallel.</li>
<li><a class="mw-redirect" href="/wiki/Distributed_programming" title="Distributed programming">Distributed programming</a> : Jobs could be scatter on different agent and environments with this pattern.</li>
<li><a href="/wiki/Software_transactional_memory" title="Software transactional memory">Software transactional memory</a> : Software transactional memory (STM) is one of the possible implementation for the communications between joint.</li>
<li><a class="mw-redirect" href="/wiki/Overlap_(road)" title="Overlap (road)">Overlapping</a> : The pattern could allow patterns declared on overlapping sets of channels.</li>
</ul>
<h2><span class="mw-headline" id="Application_domain">Application domain</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=13" title="Edit section: Application domain">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Mobile_agent">Mobile agent</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=14" title="Edit section: Mobile agent">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A <a href="/wiki/Mobile_agent" title="Mobile agent">mobile agent</a> is an autonomous software agent with a certain social ability and most importantly, mobility. It is composed of computer software and data which can move between different computers automatically while continuing their executions.</p>
<p>The mobile agents can be used to match concurrency and distribution if one uses the Join-calculus. That's why a new concept named "distributed Join-calculus" was created; it's an extension of Join-calculus with locations and primitives to describe the mobility. This innovation use agents as running processes with their communication capabilities to allow an idea of location, which is a physical site expressing the actual position of the agent. Thanks to the Join-calculus, one location can be moved atomically to another site.<sup class="reference" id="cite_ref-A_Calculus_of_Mobile_Agents_23-0"><a href="#cite_note-A_Calculus_of_Mobile_Agents-23">[23]</a></sup></p>
<p>The processes of an agent is specified as a set which define its functionality including asynchronous emission of a message, migration to other location. Consequently, locations are organized in a tree to represent the movement of the agent easier. With this representation, a benefit of this solution is the possibility to create a simple model of failure. Usually a crash of a physical site causes the permanent failure of all its locations. But with the join-calculus a problem with a location can be detected at any other running location, allowing error recovery.<sup class="reference" id="cite_ref-A_Calculus_of_Mobile_Agents_23-1"><a href="#cite_note-A_Calculus_of_Mobile_Agents-23">[23]</a></sup></p>
<blockquote class="templatequote">
<p>So the Join-calculus is the core of a distributed programming language. In particular, the operational semantics is easily implementable in a distributed setting with failures. So the distributed join-calculus treats channel names and location names as first class values with lexical scopes. A location controls its own moves, and can only move towards a location whose name it has received. This provides a sound basis for static analysis and for secure mobility. This is complete for expressing distributed configurations. In the absence of failure, however, the execution of processes is independent of distribution. This location transparency is essential for the design of mobiles agents, and very helpful for checking their properties.<sup class="reference" id="cite_ref-A_Calculus_of_Mobile_Agents_23-2"><a href="#cite_note-A_Calculus_of_Mobile_Agents-23">[23]</a></sup></p>
</blockquote>
<p>In 2007, an extension of the basic join calculus with methods which make agents proactive has come out. The agents can observe an environment shared between them. With this environment, it is possible to define shared variables with all agents (e.g. a naming service to discover agents between themselves).<sup class="reference" id="cite_ref-24"><a href="#cite_note-24">[24]</a></sup></p>
<h3><span class="mw-headline" id="Compilation">Compilation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=15" title="Edit section: Compilation">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Join-languages are built on top of the join-calculus taken as a core language. So all the calculus are analysed with asynchronous processes and the join pattern provides a model to synchronize the result.<sup class="reference" id="cite_ref-Compiling_Join-Patterns_9-1"><a href="#cite_note-Compiling_Join-Patterns-9">[9]</a></sup><br/>
To do this, it exists two Compilers :</p>
<ul>
<li>Join Compiler: A compiler of a language named "join langage". This language has been created only for the join calculus</li>
<li><a class="external text" href="http://pauillac.inria.fr/jocaml/" rel="nofollow">Jocaml Compiler</a>: A compiler of an extension of Objectif Caml created to use the join calculus.</li>
</ul>
<p>This two compiler works with the same system, an automaton.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
let A(n) | B() = P(n)
and A(n) | C() = Q(n)
;;
</pre></div>
<p>It represents the consumption of message arrive at a completed join model. Each state is a possibly step for the code execution and each transitions is the reception of a message to change between two steps. And so when all messages are grab, the compiler execute the body join code corresponding to the completed model joint.</p>
<p>So in the join-calculus, the basic values are the names like on the example is A,B or C. So the two compiler representing this values with two ways.<br/>
Join compiler use a vector with Two slots, the first to the name it-self and the second to a queue of pending messages.<br/>
Jocaml use name like a pointer on definitions. This definitions store the others pointer of the others names with a status field and a matching date structure by message.<br/>
The fundamental difference is when the guard process is executed, for the first, it was verify if all names are the pending messages ready whereas the second use only one variable and access at the others to know if the model is completed.<sup class="reference" id="cite_ref-Compiling_Join-Patterns_9-2"><a href="#cite_note-Compiling_Join-Patterns-9">[9]</a></sup></p>
<p>Recent research describe the compilation scheme as the combination of two basic steps: dispatching and forwarding. The design and correctness of the dispatcher essentially stems from pattern matching theory, while inserting an internal forwarding step in communications is a natural idea, which intuitively does not change process behavior. They made the observation that <i>the worth observing is a direct implementation of extended join-pattern matching at the runtime level would significantly complicate the management of message queues, which would then need to be scanned in search of matching messages before consuming them.</i><sup class="reference" id="cite_ref-25"><a href="#cite_note-25">[25]</a></sup></p>
<h2><span class="mw-headline" id="Implementations_and_libraries">Implementations and libraries</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=16" title="Edit section: Implementations and libraries">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>There are many uses of the Join-patterns with different languages. Some languages use join-patterns as a base of theirs implementations, for example the <a class="mw-redirect" href="/wiki/Polyphonic_C_sharp" title="Polyphonic C sharp">Polyphonic C#</a> or <a class="external text" href="http://www.mcsharp.net/" rel="nofollow">MC#</a> but others languages integrate join-pattern by a librairy like Scala Joins <sup class="reference" id="cite_ref-Implementing_Joins_Using_Extensible_Pattern_Matching_26-0"><a href="#cite_note-Implementing_Joins_Using_Extensible_Pattern_Matching-26">[26]</a></sup> for Scala or the Joins library for VB.<sup class="reference" id="cite_ref-Join_Patterns_for_Visual_Basic_27-0"><a href="#cite_note-Join_Patterns_for_Visual_Basic-27">[27]</a></sup> Moreover, the join-pattern is used through some languages like <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> to upgrade the join-pattern.<sup class="reference" id="cite_ref-scheme_28-0"><a href="#cite_note-scheme-28">[28]</a></sup></p>
<center>
<table class="wikitable">
<tr>
<th></th>
<th>JErlang</th>
<th>CB</th>
<th>Joins Library</th>
<th>Polyphonic C#</th>
<th>Parallel C#</th>
<th>Cω</th>
<th>Scala Joins</th>
<th>F#</th>
<th>Scheme</th>
<th>Join Java</th>
<th>Hume</th>
<th>JoCaml</th>
</tr>
<tr>
<td>Patterns matching</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes : reflection (expensive)</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
</tr>
<tr>
<td>Scheduler between join-patterns</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes : first match</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes : first/round robin</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes : random</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes : first/round robin</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes : random</td>
</tr>
<tr>
<td>Generics</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-na" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;">N/A</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
<td class="table-na" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;">N/A</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
</tr>
<tr>
<td>Overriding</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-na" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;">N/A</td>
<td class="table-na" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;">N/A</td>
<td class="table-na" data-sort-value="" style="background: #ececec; color: #2C2C2C; vertical-align: middle; font-size: smaller; text-align: center;">N/A</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
<td class="table-yes" style="background:#9F9;vertical-align:middle;text-align:center;">Yes</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
<td class="table-no" style="background:#F99;vertical-align:middle;text-align:center;">No</td>
</tr>
</table>
</center>
<h3><span class="mw-headline" id="Join_Java">Join Java</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=17" title="Edit section: Join Java">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Join_Java" title="Join Java">Join Java</a> <sup class="reference" id="cite_ref-Join_Java_29-0"><a href="#cite_note-Join_Java-29">[29]</a></sup> is a language based on the <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java programming language</a> allowing the use of the join calculus. It introduces three new language constructs:</p>
<ul>
<li><b>Join methods</b> is defined by two or more Join fragments. A Join method will execute once all the fragments of the Join pattern have been called. If the return type is a standard Java type then the leading fragment will block the caller until the Join pattern is complete and the method has executed. If the return type is of type signal then the leading fragment will return immediately. All trailing fragments are asynchronous so will not block the caller.</li>
</ul>
<p>Example:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
 <span class="kd">class</span> <span class="nc">JoinExample</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">fragment1</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">fragment2</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
       <span class="c1">//will return value of x</span>
       <span class="c1">//to caller of fragment1</span>
       <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
    <span class="o">}</span>
 <span class="o">}</span>
</pre></div>
<ul>
<li><b>Asynchronous methods</b> are defined by using the signal return type. This has the same characteristics as the void type except that the method will return immediately. When an asynchronous method is called a new thread is created to execute the body of the method.</li>
</ul>
<p>Example:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
 <span class="kd">class</span> <span class="nc">ThreadExample</span> <span class="o">{</span>
    <span class="n">signal</span> <span class="nf">thread</span><span class="o">(</span><span class="n">SomeObject</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
       <span class="c1">//this code will execute in a new thread</span>
    <span class="o">}</span>
 <span class="o">}</span>
</pre></div>
<ul>
<li><b>Ordering modifiers</b></li>
</ul>
<p>Join fragments can be repeated in multiple Join patterns so there can be a case when multiple Join patterns are completed when a fragment is called. Such a case could occur in the example below if B(), C() and D() then A() are called. The final A() fragment completes three of the patterns so there are three possible methods that may be called. The ordered class modifier is used here to determine which Join method will be called. The default and when using the unordered class modifier is to pick one of the methods at random. With the ordered modifier the methods are prioritised according to the order they are declared.</p>
<p>Example:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
 <span class="kd">class</span> <span class="nc">ordered</span> <span class="n">SimpleJoinPattern</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">A</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">B</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">A</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">C</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">A</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">D</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="n">signal</span> <span class="nf">D</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">E</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
 <span class="o">}</span>
</pre></div>
<p>The closest related language is the <a class="mw-redirect" href="/wiki/Polyphonic_C_sharp" title="Polyphonic C sharp">Polyphonic C#</a>.</p>
<h3><span class="mw-headline" id="JErlang">JErlang</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=18" title="Edit section: JErlang">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a> coding synchronisation between multiple processes is not straightforward. That's why the JErlang,<sup class="reference" id="cite_ref-JErlang_30-0"><a href="#cite_note-JErlang-30">[30]</a></sup> an extension of <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a> was created, The J is for Join. Indeed, To overcome this limitation JErlang was implemented, a <a href="/wiki/Join-calculus" title="Join-calculus">Join-Calculus</a> inspired extension to <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a>. The features of this language are:</p>
<ul>
<li><b>Joins</b> allows first Match semantics and the possibility of having multiple patterns with a preservation of the messages's order.</li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="nf">operation</span><span class="p">()</span> <span class="o">-&gt;</span>
    <span class="k">receive</span>
        <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">sum</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">val</span><span class="p">,</span> <span class="nv">X</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">val</span><span class="p">,</span> <span class="nv">Y</span><span class="p">}</span> <span class="o">-&gt;</span>
            <span class="p">{</span><span class="n">sum</span><span class="p">,</span> <span class="nv">X</span> <span class="o">+</span> <span class="nv">Y</span><span class="p">};</span>
        <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">mult</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">val</span><span class="p">,</span> <span class="nv">X</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">val</span><span class="p">,</span> <span class="nv">Y</span><span class="p">}</span> <span class="o">-&gt;</span>
            <span class="p">{</span><span class="n">mult</span><span class="p">,</span> <span class="nv">X</span> <span class="o">*</span> <span class="nv">Y</span><span class="p">};</span>
        <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">sub</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">val</span><span class="p">,</span> <span class="nv">X</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">val</span><span class="p">,</span> <span class="nv">Y</span><span class="p">}</span> <span class="o">-&gt;</span>
            <span class="p">{</span><span class="n">sub</span><span class="p">,</span> <span class="nv">X</span> <span class="o">-</span> <span class="nv">Y</span><span class="p">};</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
<ul>
<li><b>Guards</b> provides additional filtering not expressing in terms of patterns. Limited number of expression without side-effects</li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">receive</span>
    <span class="p">{</span><span class="nv">Transaction</span><span class="p">,</span> <span class="nv">M</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">limit</span><span class="p">,</span> <span class="nv">Lower</span><span class="p">,</span> <span class="nv">Upper</span><span class="p">}</span>
        <span class="k">when</span> <span class="p">(</span><span class="nv">Lower</span> <span class="o">&lt;=</span> <span class="nv">M</span> <span class="ow">and</span> <span class="nv">M</span> <span class="o">&lt;=</span> <span class="nv">Upper</span> <span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">commit_transaction</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="nv">Transaction</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
<ul>
<li>With <b>Non-linear patterns</b>, messages can match multiple joins</li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">receive</span>
    <span class="p">{</span><span class="nb">get</span><span class="p">,</span> <span class="nv">X</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">set</span><span class="p">,</span> <span class="nv">X</span><span class="p">}</span> <span class="o">-&gt;</span>
        <span class="p">{</span><span class="n">found</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">X</span><span class="p">}</span>
<span class="k">end</span>
<span class="p">...</span>
<span class="k">receive</span>
    <span class="p">{</span><span class="nv">Pin</span><span class="p">,</span> <span class="n">id</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">auth</span><span class="p">,</span> <span class="nv">Pin</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">commit</span><span class="p">,</span> <span class="nv">Id</span><span class="p">}</span> <span class="o">-&gt;</span>
        <span class="n">perform_transaction</span><span class="p">(</span><span class="nv">Pin</span><span class="p">,</span> <span class="nv">Id</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
<ul>
<li><b>propagation</b> allows for copying correct messages instead of removing them.</li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">receive</span>
    <span class="n">prop</span><span class="p">({</span><span class="n">session</span><span class="p">,</span> <span class="nv">Id</span><span class="p">})</span> <span class="ow">and</span> <span class="p">{</span><span class="n">act</span><span class="p">,</span> <span class="nv">Action</span><span class="p">,</span> <span class="nv">Id</span><span class="p">}</span> <span class="o">-&gt;</span>
        <span class="n">perform_action</span><span class="p">(</span><span class="nv">Action</span><span class="p">,</span> <span class="nv">Id</span><span class="p">);</span>
    <span class="p">{</span><span class="n">session</span><span class="p">,</span> <span class="nv">Id</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">logout</span><span class="p">,</span> <span class="nv">Id</span><span class="p">}</span> <span class="o">-&gt;</span>
        <span class="n">logout_user</span><span class="p">(</span><span class="nv">Id</span><span class="p">)</span>
<span class="k">end</span>
<span class="p">...</span>
<span class="k">receive</span>
    <span class="p">{</span><span class="nv">Pin</span><span class="p">,</span> <span class="n">id</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">auth</span><span class="p">,</span> <span class="nv">Pin</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">commit</span><span class="p">,</span> <span class="nv">Id</span><span class="p">}</span> <span class="o">-&gt;</span>
        <span class="n">perform_transaction</span><span class="p">(</span><span class="nv">Pin</span><span class="p">,</span> <span class="nv">Id</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
<ul>
<li><b>Synchronous calls</b></li>
</ul>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">receive</span>
    <span class="p">{</span><span class="n">accept</span><span class="p">,</span> <span class="nv">Pid1</span><span class="p">}</span> <span class="ow">and</span> <span class="p">{</span><span class="n">asynchronous</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}</span>
                   <span class="ow">and</span> <span class="p">{</span><span class="n">accept</span><span class="p">,</span> <span class="nv">Pid2</span><span class="p">}</span> <span class="o">-&gt;</span>
        <span class="nv">Pid1</span> <span class="o">!</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Value</span><span class="p">},</span>
        <span class="nv">Pid2</span> <span class="o">!</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}</span>
<span class="k">end</span>
</pre></div>
<h3><span class="mw-headline" id="C.2B.2B">C++</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=19" title="Edit section: C++">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Yigong Liu has written some <a class="external text" href="http://channel.sourceforge.net/boost_join/libs/join/doc/synopsis_port.html" rel="nofollow">classes for the join pattern</a> including all useful tools like <a class="mw-redirect" href="/wiki/Synchronous_I/O" title="Synchronous I/O">asynchronous</a> and synchronous channels, <a href="/wiki/Chord_(concurrency)" title="Chord (concurrency)">chords</a>, etc. It's integrated in the project <a class="external text" href="http://www.boost.org/" rel="nofollow">Boost c++</a>.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">V</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">buffer</span><span class="o">:</span> <span class="k">public</span> <span class="n">joint</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
  <span class="n">async</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">put</span><span class="p">;</span>
  <span class="n">synch</span><span class="o">&lt;</span><span class="n">V</span><span class="p">,</span><span class="kt">void</span><span class="o">&gt;</span> <span class="n">get</span><span class="p">;</span>
  <span class="n">buffer</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">chord</span><span class="p">(</span><span class="n">get</span><span class="p">,</span> <span class="n">put</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buffer</span><span class="o">::</span><span class="n">chord_body</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">V</span> <span class="n">chord_body</span><span class="p">(</span><span class="n">void_t</span> <span class="n">g</span><span class="p">,</span> <span class="n">V</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre></div>
<p>This example shows us a thread safe buffer and message queue with the basic operations put and get.<sup class="reference" id="cite_ref-31"><a href="#cite_note-31">[31]</a></sup></p>
<h3><span class="mw-headline" id="C.23">C#</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=20" title="Edit section: C#">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<h4><span class="mw-headline" id="Polyphonic_C.23">Polyphonic C#</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=21" title="Edit section: Polyphonic C#">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p><a class="mw-redirect" href="/wiki/Polyphonic_C_sharp" title="Polyphonic C sharp">Polyphonic C#</a> is an extension of the C# programming language. It introduces a new concurrency model with synchronous and asynchronous (which return control to the caller) methods and chords (also known as ‘synchronization patterns’ or ‘join patterns’).</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Buffer</span> <span class="p">{</span>
   <span class="k">public</span> <span class="n">String</span> <span class="nf">get</span><span class="p">()</span> <span class="p">&amp;</span> <span class="k">public</span> <span class="k">async</span> <span class="n">put</span><span class="p">(</span><span class="n">String</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<p>This is a simple buffer example.<sup class="reference" id="cite_ref-32"><a href="#cite_note-32">[32]</a></sup></p>
<h4><span class="mw-headline" id="MC.23">MC#</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=22" title="Edit section: MC#">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p><a class="external text" href="http://www.mcsharp.net/" rel="nofollow">MC#</a> language is an adaptation of the Polyphonic C# language for the case of concurrent distributed computations.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">public</span> <span class="n">handler</span> <span class="n">Get2</span> <span class="nf">long</span> <span class="p">()</span> <span class="p">&amp;</span> <span class="n">channel</span> <span class="n">c1</span> <span class="p">(</span> <span class="kt">long</span> <span class="n">x</span> <span class="p">)</span>
<span class="p">&amp;</span> <span class="n">channel</span> <span class="n">c2</span> <span class="p">(</span> <span class="kt">long</span> <span class="n">y</span> <span class="p">)</span>
<span class="p">{</span>
<span class="k">return</span> <span class="p">(</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span> <span class="p">);</span>
<span class="p">}</span>
</pre></div>
<p>This example demonstrates the using of chords as a synchronization tool.</p>
<h4><span class="mw-headline" id="Parallel_C.23">Parallel C#</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=23" title="Edit section: Parallel C#">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p><a class="external text" href="http://www.parallelcsharp.com/" rel="nofollow">Parallel C#</a> is based Polyphonic C# and they add some new concepts like movables methods, high-order functions.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
 
<span class="k">class</span> <span class="nc">Test13</span> <span class="p">{</span>
 <span class="kt">int</span> <span class="nf">Receive</span><span class="p">()</span> <span class="p">&amp;</span> <span class="k">async</span> <span class="n">Send</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span> <span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">x</span> <span class="p">*</span> <span class="n">x</span><span class="p">;</span>
 <span class="p">}</span>
 
 <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">args</span> <span class="p">)</span> <span class="p">{</span>
  <span class="n">Test13</span> <span class="n">t</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Test13</span><span class="p">();</span>
  <span class="n">t</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span> <span class="m">2</span> <span class="p">);</span>
  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span> <span class="n">t</span><span class="p">.</span><span class="n">Receive</span><span class="p">()</span> <span class="p">);</span>
 <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<p>This example demonstrates how to use joins.<sup class="reference" id="cite_ref-33"><a href="#cite_note-33">[33]</a></sup></p>
<h4><span class="mw-headline" id="C.CF.89">Cω</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=24" title="Edit section: Cω">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p><a href="/wiki/C%CF%89" title="Cω">Cω</a> adds new language features to support <a class="mw-redirect" href="/wiki/Concurrent_programming" title="Concurrent programming">concurrent programming</a> (based on the earlier <a class="mw-redirect" href="/wiki/Polyphonic_C_sharp" title="Polyphonic C sharp">Polyphonic C#</a>).The Joins Concurrency Library for C# and other .NET languages is derived of this project.<sup class="reference" id="cite_ref-34"><a href="#cite_note-34">[34]</a></sup><sup class="reference" id="cite_ref-35"><a href="#cite_note-35">[35]</a></sup></p>
<h4><span class="mw-headline" id="Scalable_Join_Patterns">Scalable Join Patterns</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=25" title="Edit section: Scalable Join Patterns">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>It's an easy to use declarative and scalable join-pattern library. In opposite to the Russo library,<sup class="reference" id="cite_ref-Join_Patterns_for_Visual_Basic_27-1"><a href="#cite_note-Join_Patterns_for_Visual_Basic-27">[27]</a></sup> it has no global lock. In fact, it's working with a <a href="/wiki/Compare-and-swap" title="Compare-and-swap">compare-and-swap CAS</a> and Atomic message system. The library <sup class="reference" id="cite_ref-36"><a href="#cite_note-36">[36]</a></sup> use three improvements for the join-pattern :</p>
<ul>
<li>Stealing message for unused resources (allowing barging);</li>
<li>Lazy queue saves both on allocation and potentially on interprocessor communication by avoiding allocate or enqueue with an optimistic fast-path;</li>
<li>A status "WOKEN" : ensures that a blocked synchronous caller is woken only once.</li>
</ul>
<h3><span class="mw-headline" id="JoCaml">JoCaml</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=26" title="Edit section: JoCaml">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/JoCaml" title="JoCaml">JoCaml</a> is the first language where the join-pattern was implemented. Indeed, at the beginning all the different implementation was compiled with the JoCaml Compiler. <a class="external text" href="http://jocaml.inria.fr/" rel="nofollow">JoCaml language</a> is an extension of the <a href="/wiki/OCaml" title="OCaml">OCaml</a> language. It extends OCaml with support for concurrency and synchronization, the distributed execution of programs, and the dynamic relocation of active program fragments during execution <sup class="reference" id="cite_ref-jocaml_37-0"><a href="#cite_note-jocaml-37">[37]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">type</span> <span class="n">coins</span> <span class="o">=</span> <span class="nc">Nickel</span> <span class="o">|</span> <span class="nc">Dime</span>
<span class="ow">and</span> <span class="n">drinks</span> <span class="o">=</span> <span class="nc">Coffee</span> <span class="o">|</span> <span class="nc">Tea</span>
<span class="ow">and</span> <span class="n">buttons</span> <span class="o">=</span> <span class="nc">BCoffee</span> <span class="o">|</span> <span class="nc">BTea</span> <span class="o">|</span> <span class="nc">BCancel</span><span class="o">;;</span>

<span class="c">(* def defines a Join-pattern set clause</span>
<span class="c"> * "&amp;" in the left side of = means join (channel synchronism)</span>
<span class="c"> * "&amp;" in the right hand side means: parallel process</span>
<span class="c"> * synchronous_reply :== "reply" [x] "to" channel_name</span>
<span class="c"> * synchronous channels have function-like types (`a -&gt; `b)</span>
<span class="c"> * asynchronous channels have types (`a Join.chan)</span>
<span class="c"> * only the last statement in a pattern rhs expression can be an asynchronous message</span>
<span class="c"> * 0 in an asynchronous message position means STOP ("no sent message" in CSP terminology).</span>
<span class="c">   *)</span>

<span class="n">def</span> <span class="n">put</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">=</span> <span class="n">print_endline</span> <span class="n">s</span> <span class="o">;</span> <span class="mi">0</span> <span class="c">(* STOP *)</span> 
  <span class="o">;;</span> <span class="c">(* put: string Join.chan *)</span>

<span class="n">def</span> <span class="n">serve</span><span class="o">(</span><span class="n">drink</span><span class="o">)</span> <span class="o">=</span> <span class="k">match</span> <span class="n">drink</span> <span class="k">with</span>
                 <span class="nc">Coffee</span> <span class="o">-&gt;</span> <span class="n">put</span><span class="o">(</span><span class="s2">"Cofee"</span><span class="o">)</span>
                 <span class="o">|</span> <span class="nc">Tea</span> <span class="o">-&gt;</span> <span class="n">put</span><span class="o">(</span><span class="s2">"Tea"</span><span class="o">)</span>
              <span class="o">;;</span> <span class="c">(* serve: drinks Join.chan *)</span>

<span class="n">def</span> <span class="n">refund</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">=</span> <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nn">Printf</span><span class="p">.</span><span class="n">sprintf</span> <span class="s2">"Refund %d"</span> <span class="n">v</span> <span class="k">in</span> <span class="n">put</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> 
    <span class="o">;;</span> <span class="c">(* refund: int Join.chan *)</span>

<span class="k">let</span> <span class="n">new_vending</span> <span class="n">serve</span> <span class="n">refund</span> <span class="o">=</span>
  <span class="k">let</span> <span class="n">vend</span> <span class="o">(</span><span class="n">cost</span><span class="o">:</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">credit</span><span class="o">:</span><span class="kt">int</span><span class="o">)</span> <span class="o">=</span> <span class="k">if</span> <span class="n">credit</span> <span class="o">&gt;=</span> <span class="n">cost</span>
                      <span class="k">then</span> <span class="o">(</span><span class="bp">true</span><span class="o">,</span> <span class="n">credit</span> <span class="o">-</span> <span class="n">cost</span><span class="o">)</span>
                      <span class="k">else</span> <span class="o">(</span><span class="bp">false</span><span class="o">,</span> <span class="n">credit</span><span class="o">)</span>
  <span class="k">in</span>
  <span class="n">def</span> <span class="n">coin</span><span class="o">(</span><span class="nc">Nickel</span><span class="o">)</span> <span class="o">&amp;</span> <span class="k">value</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">=</span> <span class="k">value</span><span class="o">(</span><span class="n">v</span><span class="o">+</span><span class="mi">5</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">reply</span> <span class="bp">()</span> <span class="k">to</span> <span class="n">coin</span>
  <span class="ow">or</span> <span class="n">coin</span><span class="o">(</span><span class="nc">Dime</span><span class="o">)</span> <span class="o">&amp;</span> <span class="k">value</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">=</span> <span class="k">value</span><span class="o">(</span><span class="n">v</span><span class="o">+</span><span class="mi">10</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">reply</span> <span class="bp">()</span> <span class="k">to</span> <span class="n">coin</span>

  <span class="ow">or</span> <span class="n">button</span><span class="o">(</span><span class="nc">BCoffee</span><span class="o">)</span> <span class="o">&amp;</span> <span class="k">value</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">=</span> 
     <span class="k">let</span> <span class="n">should_serve</span><span class="o">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="n">vend</span> <span class="mi">10</span> <span class="n">v</span> <span class="k">in</span>
     <span class="o">(</span><span class="k">if</span> <span class="n">should_serve</span> <span class="k">then</span> <span class="n">serve</span><span class="o">(</span><span class="nc">Coffee</span><span class="o">)</span> <span class="k">else</span> <span class="mi">0</span> <span class="c">(* STOP *)</span><span class="o">)</span> 
             <span class="o">&amp;</span> <span class="k">value</span><span class="o">(</span><span class="n">remainder</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">reply</span> <span class="bp">()</span> <span class="k">to</span> <span class="n">button</span>

  <span class="ow">or</span> <span class="n">button</span><span class="o">(</span><span class="nc">BTea</span><span class="o">)</span> <span class="o">&amp;</span> <span class="k">value</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">=</span> 
     <span class="k">let</span> <span class="n">should_serve</span><span class="o">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="n">vend</span> <span class="mi">5</span> <span class="n">v</span> <span class="k">in</span>
     <span class="o">(</span><span class="k">if</span> <span class="n">should_serve</span> <span class="k">then</span> <span class="n">serve</span><span class="o">(</span><span class="nc">Tea</span><span class="o">)</span> <span class="k">else</span> <span class="mi">0</span> <span class="c">(* STOP *)</span><span class="o">)</span> 
             <span class="o">&amp;</span> <span class="k">value</span><span class="o">(</span><span class="n">remainder</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">reply</span> <span class="bp">()</span> <span class="k">to</span> <span class="n">button</span>

  <span class="ow">or</span> <span class="n">button</span><span class="o">(</span><span class="nc">BCancel</span><span class="o">)</span> <span class="o">&amp;</span> <span class="k">value</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">=</span> <span class="n">refund</span><span class="o">(</span> <span class="n">v</span><span class="o">)</span> <span class="o">&amp;</span> <span class="k">value</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">reply</span> <span class="bp">()</span> <span class="k">to</span> <span class="n">button</span>
  <span class="k">in</span> <span class="n">spawn</span> <span class="k">value</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">;</span>
  <span class="n">coin</span><span class="o">,</span> <span class="n">button</span>  <span class="c">(* coin, button: int -&gt; unit *)</span>
  <span class="o">;;</span> <span class="c">(* new_vending: drink Join.chan -&gt; int Join.chan -&gt; (int-&gt;unit)*(int-&gt;unit) *)</span>

<span class="k">let</span> <span class="n">ccoin</span><span class="o">,</span> <span class="n">cbutton</span> <span class="o">=</span> <span class="n">new_vending</span> <span class="n">serve</span> <span class="n">refund</span> <span class="k">in</span>
  <span class="n">ccoin</span><span class="o">(</span><span class="nc">Nickel</span><span class="o">);</span> <span class="n">ccoin</span><span class="o">(</span><span class="nc">Nickel</span><span class="o">);</span> <span class="n">ccoin</span><span class="o">(</span><span class="nc">Dime</span><span class="o">);</span> 
  <span class="nn">Unix</span><span class="p">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="n">cbutton</span><span class="o">(</span><span class="nc">BCoffee</span><span class="o">);</span> 
  <span class="nn">Unix</span><span class="p">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="n">cbutton</span><span class="o">(</span><span class="nc">BTea</span><span class="o">);</span> 
  <span class="nn">Unix</span><span class="p">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="n">cbutton</span><span class="o">(</span><span class="nc">BCancel</span><span class="o">);</span>
  <span class="nn">Unix</span><span class="p">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="c">(* let the last message show up *)</span>
  <span class="o">;;</span>
</pre></div>
<p>gives</p>
<pre>
Coffee
Tea
Refund 5
</pre>
<h3><span class="mw-headline" id="Hume">Hume</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=27" title="Edit section: Hume">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Hume_(programming_language)" title="Hume (programming language)">Hume</a><sup class="reference" id="cite_ref-38"><a href="#cite_note-38">[38]</a></sup> is a <a class="mw-redirect" href="/wiki/Strict_language" title="Strict language">strict</a>, <a class="mw-redirect" href="/wiki/Typed_language" title="Typed language">strongly typed</a> <a href="/wiki/Functional_programming" title="Functional programming">functional</a> language for limited resources platforms, with concurrency based on asynchronous message passing, <a href="/wiki/Dataflow_programming" title="Dataflow programming">dataflow programming</a>, and a <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> like syntax.</p>
<p>Hume does not provide synchronous messaging.</p>
<p>It wraps a join-pattern set with a channel in common as a <i>box</i>, listing all channels in an <i>in</i> tuple and specifying all possible outputs in an <i>out</i> tuple.</p>
<p>Every join-pattern in the set must conform to the <i>box</i> input tuple type specifying a '*' for non required channels, giving an expression whose type conform to the output tuple, marking '*' the non fed outputs.</p>
<p>A <i>wire</i> clause specifies</p>
<ol>
<li>a tuple of corresponding input origins or sources and optionally start values</li>
<li>a tuple of output destinations, being channels or sinks (stdout, ..).</li>
</ol>
<p>A <i>box</i> can specify exception handlers with expressions conforming to the output tuple.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">data</span> <span class="kt">Coins</span> <span class="ow">=</span> <span class="kt">Nickel</span> <span class="o">|</span> <span class="kt">Dime</span><span class="p">;</span>
<span class="kr">data</span> <span class="kt">Drinks</span> <span class="ow">=</span> <span class="kt">Coffee</span> <span class="o">|</span> <span class="kt">Tea</span><span class="p">;</span>
<span class="kr">data</span> <span class="kt">Buttons</span> <span class="ow">=</span> <span class="kt">BCoffee</span> <span class="o">|</span> <span class="kt">BTea</span> <span class="o">|</span> <span class="kt">BCancel</span><span class="p">;</span>

<span class="kr">type</span> <span class="kt">Int</span> <span class="ow">=</span> <span class="n">int</span> <span class="mi">32</span> <span class="p">;</span>
<span class="kr">type</span> <span class="kt">String</span> <span class="ow">=</span> <span class="n">string</span> <span class="p">;</span>
<span class="nf">show</span> <span class="n">u</span> <span class="ow">=</span> <span class="n">u</span> <span class="n">as</span> <span class="n">string</span> <span class="p">;</span>

<span class="nf">box</span> <span class="n">coffee</span>
<span class="kr">in</span> <span class="p">(</span> <span class="n">coin</span> <span class="ow">::</span> <span class="kt">Coins</span><span class="p">,</span> <span class="n">button</span> <span class="ow">::</span> <span class="kt">Buttons</span><span class="p">,</span> <span class="n">value</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="p">)</span> <span class="c1">-- input channels</span>
<span class="nf">out</span> <span class="p">(</span> <span class="n">drink_outp</span> <span class="ow">::</span> <span class="kt">String</span><span class="p">,</span> <span class="n">value</span><span class="err">’</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">refund_outp</span> <span class="ow">::</span> <span class="kt">String</span><span class="p">)</span>  <span class="c1">-- named outputs</span>

<span class="nf">match</span>
<span class="c1">-- * wildcards for unfilled outputs, and unconsumed inputs</span>
  <span class="p">(</span> <span class="kt">Nickel</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>  <span class="ow">-&gt;</span> <span class="p">(</span> <span class="o">*</span><span class="p">,</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">5</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
<span class="o">|</span> <span class="p">(</span> <span class="kt">Dime</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>    <span class="ow">-&gt;</span> <span class="p">(</span> <span class="o">*</span><span class="p">,</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
<span class="o">|</span> <span class="p">(</span> <span class="o">*</span><span class="p">,</span> <span class="kt">BCoffee</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">vend</span> <span class="kt">Coffee</span> <span class="mi">10</span> <span class="n">v</span>
<span class="o">|</span> <span class="p">(</span> <span class="o">*</span><span class="p">,</span> <span class="kt">BTea</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>    <span class="ow">-&gt;</span> <span class="n">vend</span> <span class="kt">Tea</span> <span class="mi">5</span> <span class="n">v</span>
<span class="o">|</span> <span class="p">(</span> <span class="o">*</span><span class="p">,</span> <span class="kt">BCancel</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kr">let</span> <span class="n">refund</span> <span class="n">u</span> <span class="ow">=</span> <span class="s">"Refund "</span> <span class="o">++</span> <span class="n">show</span> <span class="n">u</span> <span class="o">++</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span>
                      <span class="kr">in</span> <span class="p">(</span> <span class="o">*</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">refund</span> <span class="n">v</span><span class="p">)</span>
<span class="p">;</span>

<span class="nf">vend</span> <span class="n">drink</span> <span class="n">cost</span> <span class="n">credit</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">credit</span> <span class="o">&gt;=</span> <span class="n">cost</span>
                      <span class="kr">then</span> <span class="p">(</span> <span class="n">serve</span> <span class="n">drink</span><span class="p">,</span> <span class="n">credit</span> <span class="o">-</span> <span class="n">cost</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
                      <span class="kr">else</span> <span class="p">(</span> <span class="o">*</span><span class="p">,</span> <span class="n">credit</span><span class="p">,</span> <span class="o">*</span><span class="p">);</span>

<span class="nf">serve</span> <span class="n">drink</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">drink</span> <span class="kr">of</span>
               <span class="kt">Coffee</span> <span class="ow">-&gt;</span> <span class="s">"Cofee</span><span class="se">\n</span><span class="s">"</span>
               <span class="kt">Tea</span> <span class="ow">-&gt;</span> <span class="s">"Tea</span><span class="se">\n</span><span class="s">"</span>
<span class="p">;</span>

<span class="nf">box</span> <span class="n">control</span>
<span class="kr">in</span> <span class="p">(</span><span class="n">c</span> <span class="ow">::</span> <span class="n">char</span><span class="p">)</span>
<span class="nf">out</span> <span class="p">(</span><span class="n">coin</span> <span class="ow">::</span> <span class="kt">Coins</span><span class="p">,</span> <span class="n">button</span><span class="ow">::</span> <span class="kt">Buttons</span><span class="p">)</span>
<span class="nf">match</span>
 <span class="sc">'n'</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Nickel</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
 <span class="o">|</span> <span class="sc">'d'</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Dime</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
 <span class="o">|</span> <span class="sc">'c'</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="kt">BCoffee</span><span class="p">)</span>
 <span class="o">|</span> <span class="sc">'t'</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="kt">BTea</span><span class="p">)</span>
 <span class="o">|</span> <span class="sc">'x'</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="kt">BCancel</span><span class="p">)</span>
 <span class="o">|</span> <span class="kr">_</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
<span class="p">;</span>

<span class="nf">stream</span> <span class="n">console_outp</span> <span class="n">to</span> <span class="s">"std_out"</span> <span class="p">;</span>
<span class="nf">stream</span> <span class="n">console_inp</span> <span class="n">from</span> <span class="s">"std_in"</span> <span class="p">;</span>

<span class="c1">-- dataflow wiring</span>
 
<span class="nf">wire</span> <span class="n">cofee</span>
    <span class="c1">-- inputs (channel origins)</span>
    <span class="p">(</span><span class="n">control</span><span class="o">.</span><span class="n">coin</span><span class="p">,</span> <span class="n">control</span><span class="o">.</span><span class="n">button</span><span class="p">,</span> <span class="n">coffee</span><span class="o">.</span><span class="n">value</span><span class="err">’</span> <span class="n">initially</span> <span class="mi">0</span><span class="p">)</span>   
    <span class="c1">-- outputs destinations</span>
    <span class="p">(</span><span class="n">console_outp</span><span class="p">,</span> <span class="n">coffee</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">console_outp</span><span class="p">)</span>
<span class="p">;</span>
 
<span class="nf">wire</span> <span class="n">control</span>
    <span class="p">(</span><span class="n">console_inp</span><span class="p">)</span>
    <span class="p">(</span><span class="n">coffee</span><span class="o">.</span><span class="n">coin</span><span class="p">,</span> <span class="n">coffee</span><span class="o">.</span><span class="n">button</span><span class="p">)</span>
<span class="p">;</span>
</pre></div>
<h3><span class="mw-headline" id="Visual_Basic">Visual Basic</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=28" title="Edit section: Visual Basic">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<h4><span class="mw-headline" id="Concurrent_Basic_-_CB">Concurrent Basic - CB</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=29" title="Edit section: Concurrent Basic - CB">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>An extension of Visual Basic 9.0 with asynchronous concurrency constructs, called Concurrent Basic (for short CB), offer the join patterns. CB (builds on earlier work on Polyphonic C#, Cω and the Joins Library) adopts a simple event-like syntax familiar to VB programmers, allows one to declare generic concurrency abstractions and provides more natural support for inheritance, enabling a subclass to augment the set of patterns. CB class can declare method to execute <i>when</i> communication has occurred on a particular set of local channels asynchronous and synchronous, forming a join pattern.<sup class="reference" id="cite_ref-Join_Patterns_for_Visual_Basic_27-2"><a href="#cite_note-Join_Patterns_for_Visual_Basic-27">[27]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">Module</span> <span class="nn">Buffer</span>

  <span class="k">Public</span> <span class="n">Asynchronous</span> <span class="n">Put</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">s</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">)</span>
  <span class="k">Public</span> <span class="n">Synchronous</span> <span class="n">Take</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span>

  <span class="k">Private</span> <span class="k">Function</span> <span class="nf">CaseTakeAndPut</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">s</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">)</span> <span class="ow">As</span> <span class="kt">String</span> _
    <span class="k">When</span> <span class="n">Take</span><span class="p">,</span> <span class="n">Put</span>      
       <span class="k">Return</span> <span class="n">s</span>
  <span class="k">End</span> <span class="k">Function</span>

<span class="k">End</span> <span class="k">Module</span>
</pre></div>
<p>This example shows all new keywords used by Concurrent Basic: Asynchronous, Synchronous and When.<sup class="reference" id="cite_ref-39"><a href="#cite_note-39">[39]</a></sup></p>
<h3><span class="mw-headline" id="Joins_library_.28C.23_and_VB.29">Joins library (C# and VB)</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=30" title="Edit section: Joins library (C# and VB)">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>This library is a high-level abstractions of the Join Pattern using objects and generics. Channels are special delegate values from some common Join object (instead of methods).<sup class="reference" id="cite_ref-40"><a href="#cite_note-40">[40]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
 <span class="k">class</span> <span class="nc">Buffer</span> <span class="p">{</span>
   <span class="k">public</span> <span class="k">readonly</span> <span class="n">Asynchronous</span><span class="p">.</span><span class="n">Channel</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Put</span><span class="p">;</span>
   <span class="k">public</span> <span class="k">readonly</span> <span class="n">Synchronous</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="n">Channel</span> <span class="n">Get</span><span class="p">;</span>
   <span class="k">public</span> <span class="nf">Buffer</span><span class="p">()</span> <span class="p">{</span>
     <span class="n">Join</span> <span class="k">join</span> <span class="p">=</span> <span class="n">Join</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
     <span class="k">join</span><span class="p">.</span><span class="n">Initialize</span><span class="p">(</span><span class="k">out</span> <span class="n">Put</span><span class="p">);</span>  
     <span class="k">join</span><span class="p">.</span><span class="n">Initialize</span><span class="p">(</span><span class="k">out</span> <span class="n">Get</span><span class="p">);</span>
     <span class="k">join</span><span class="p">.</span><span class="n">When</span><span class="p">(</span><span class="n">Get</span><span class="p">).</span><span class="n">And</span><span class="p">(</span><span class="n">Put</span><span class="p">).</span><span class="n">Do</span><span class="p">(</span><span class="k">delegate</span><span class="p">(</span><span class="kt">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span> 
       <span class="k">return</span> <span class="n">s</span><span class="p">;</span> 
     <span class="p">});</span>
   <span class="p">}</span>
 <span class="p">}</span>
</pre></div>
<p>This example shows how to use methods of the Join object.<sup class="reference" id="cite_ref-41"><a href="#cite_note-41">[41]</a></sup></p>
<h3><span class="mw-headline" id="Scala">Scala</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=31" title="Edit section: Scala">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>There is a library in Scala called "Scala Joins" <a class="external text" href="http://lampwww.epfl.ch/~phaller/joins/index.html" rel="nofollow">Scala Joins</a> to use the Join-Pattern, it proposes to use pattern matching <a href="/wiki/Pattern_matching" title="Pattern matching">Pattern Matching</a> as a tool for creating models of joins. You can find examples of the use of the join pattern in scala here: <a class="external text" href="http://lampwww.epfl.ch/~cremet/join_in_scala/index.html" rel="nofollow">Join definitions in Scala</a>.</p>
<p>The pattern matching facilities of this language have been generalized to allow representation independence for objects used in pattern matching. So now it's possible to use a new type of abstraction in libraries. The advantage of join patterns is that they allow a declarative speciﬁcation of the synchronization between different threads. Often, the join patterns corresponds closely to a ﬁnite state machine that speciﬁes the valid states of the object.</p>
<p>In Scala, it's possible to solve many problem with the pattern matching and Scala Joins, for example the Reader-Writer.<sup class="reference" id="cite_ref-Implementing_Joins_Using_Extensible_Pattern_Matching_26-1"><a href="#cite_note-Implementing_Joins_Using_Extensible_Pattern_Matching-26">[26]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">ReaderWriterLock</span> <span class="k">extends</span> <span class="nc">Joins</span> <span class="o">{</span>

<span class="k">private</span> <span class="k">val</span> <span class="nc">Sharing</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AsyncEvent</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
<span class="k">val</span> <span class="nc">Exclusive</span><span class="o">,</span> <span class="nc">ReleaseExclusive</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">NullarySyncEvent</span>
<span class="k">val</span> <span class="nc">Shared</span><span class="o">,</span> <span class="nc">ReleaseShared</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">NullarySyncEvent</span>
<span class="n">join</span> <span class="o">{</span>
<span class="k">case</span> <span class="nc">Exclusive</span><span class="o">()</span> <span class="o">&amp;</span> <span class="nc">Sharing</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Exclusive</span> <span class="n">reply</span>
<span class="k">case</span> <span class="nc">ReleaseExclusive</span><span class="o">()</span> <span class="k">=&gt;</span> <span class="o">{</span> <span class="nc">Sharing</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="nc">ReleaseExclusive</span> <span class="n">reply</span> <span class="o">}</span>
<span class="k">case</span> <span class="nc">Shared</span><span class="o">()</span> <span class="o">&amp;</span> <span class="nc">Sharing</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span> <span class="nc">Sharing</span><span class="o">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span> <span class="nc">Shared</span> <span class="n">reply</span> <span class="o">}</span>
<span class="k">case</span> <span class="nc">ReleaseShared</span><span class="o">()</span> <span class="o">&amp;</span> <span class="nc">Sharing</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span> <span class="nc">Sharing</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="nc">ReleaseShared</span> <span class="n">reply</span> <span class="o">}</span>
<span class="k">case</span> <span class="nc">ReleaseShared</span><span class="o">()</span> <span class="o">&amp;</span> <span class="nc">Sharing</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span> <span class="nc">Sharing</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span> <span class="nc">ReleaseShared</span> <span class="n">reply</span> <span class="o">}</span>
<span class="o">}</span>
<span class="nc">Sharing</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">}</span>
</pre></div>
<p>With a class we declare events in regular fields. So, it's possible to use the Join construct to enable a pattern matching via a list of case declarations. That list is representing by =&gt; with on each side a part of the declaration. The left-side is a model of join pattern to show the combinaison of events asynchronous and synchronous and the right-side is the body of join which is executed with the join model is completed.</p>
<p>In Scala, it's also possible to use the Scala's actor library <sup class="reference" id="cite_ref-actorScala_42-0"><a href="#cite_note-actorScala-42">[42]</a></sup> with the join pattern. For example, an unbounded buffer:<sup class="reference" id="cite_ref-Implementing_Joins_Using_Extensible_Pattern_Matching_26-2"><a href="#cite_note-Implementing_Joins_Using_Extensible_Pattern_Matching-26">[26]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">val</span> <span class="nc">Put</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Join1</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
<span class="k">val</span> <span class="nc">Get</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Join</span>
<span class="k">class</span> <span class="nc">Buffer</span> <span class="k">extends</span> <span class="nc">JoinActor</span> <span class="o">{</span>
<span class="k">def</span> <span class="n">act</span><span class="o">()</span> <span class="o">{</span>
<span class="n">receive</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">Get</span><span class="o">()</span> <span class="o">&amp;</span> <span class="nc">Put</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Get</span> <span class="n">reply</span> <span class="n">x</span> <span class="o">}</span>
<span class="o">}</span> <span class="o">}</span>
</pre></div>
<p>Actor-based concurrency is supported by means of a library and we provide join patterns as a library extension as well, so there are the opportunity to combine join patterns with the event-driven concurrency model offered by actors. Like you see in the example, it's the same way to use join pattern with actors, it just do it a list of case declaration in the method receive to show when the model is completed.</p>
<p>Practically the same tools are available in F# to use join pattern</p>
<p>Improvement of Dr. Philipp Haller's <a class="external text" href="http://homepages.inf.ed.ac.uk/s1024484/join/" rel="nofollow">Scala Joins</a> Library is existing.</p>
<h3><span class="mw-headline" id="Scheme">Scheme</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=32" title="Edit section: Scheme">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The Join Patterns allows a new programming type especially for the multi-core architectures available in many programming situations with a high-levels of abstraction. This is based on the Guards and Propagation. So an example of this innovation has been implemented in Scheme .<sup class="reference" id="cite_ref-scheme_28-1"><a href="#cite_note-scheme-28">[28]</a></sup></p>
<p>Guards is essential to guarantee that only data with a matching key is updated/retrieved. Propagation can cancel an item, reads its contents and puts backs an item into a store. Of course, the item is also in the store during the reading. The guards is expressed with shared variables. And so the novelty is that the join patern can contains now propagated and simplified parts. So in Scheme, the part before / is propagated and the part after / is removed. The use of the Goal-Based is to divise the work in many tasks and joins all results at the end with the join pattern. A system named "MiniJoin" has implemented to use the intermediate result to solve the others tasks if it's possible. If is not possible it waits the solution of others tasks to solve itself.<br/>
So the concurrent join pattern application executed in parallel on a multi-core architecture doesn't guarantee that parallel execution lead to conflicts. To Guarantee this and a high degree of parallelism, a Software Transactional Memory (STM) within a highlytuned concurrent data structure based on atomic compare-and-swap (CAS) is use. This allows to run many concurrents operations in parallel on multi-core architecture. Moreover, an atomic execution is used to prevent the "false conflict" between CAS and STM.<sup class="reference" id="cite_ref-scheme_28-2"><a href="#cite_note-scheme-28">[28]</a></sup></p>
<h2><span class="mw-headline" id="Other_similar_design_patterns">Other similar design patterns</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=33" title="Edit section: Other similar design patterns">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Join Pattern is not the only pattern to perform multitasks but it's the only one that allow communication between resources, synchronization and join different processes.</p>
<ul>
<li>Sequence pattern : consists of waiting that a task have completed to switch to another (the classic implementation).<sup class="reference" id="cite_ref-43"><a href="#cite_note-43">[43]</a></sup></li>
</ul>
<ul>
<li>Split pattern (<i>parallel split</i>) : perform several tasks in parallel at the same time (e.g. <a class="mw-redirect" href="/wiki/Map_reduce" title="Map reduce">Map reduce</a>).<sup class="reference" id="cite_ref-44"><a href="#cite_note-44">[44]</a></sup></li>
</ul>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=34" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="/wiki/Join_Java" title="Join Java">Join Java</a> – Join Java is a programming language that extends the standard Java programming language</li>
<li><a href="/wiki/Joins_(concurrency_library)" title="Joins (concurrency library)">Joins (concurrency library)</a> – Joins is an asynchronous concurrent computing API from Microsoft Research for the .NET Framework.</li>
<li><a href="/wiki/Join-calculus" title="Join-calculus">Join-calculus</a> - The join-calculus was developed to provide a formal basis for the design of distributed programming languages.</li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=35" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="refbegin" style="">
<ul>
<li><cite class="citation web">Cédric, Fournet; Luc, Maranget (2006-08-15). <a class="external text" href="http://moscova.inria.fr/join/manual/index.html" rel="nofollow">"The Join-Calculus language"</a>. Institut National de Recherche en Informatique et Automatique<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-10-09</span></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.aufirst=Fournet&amp;rft.aulast=C%C3%A9dric&amp;rft.au=Luc%2C+Maranget&amp;rft.btitle=The+Join-Calculus+language&amp;rft.date=2006-08-15&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fmoscova.inria.fr%2Fjoin%2Fmanual%2Findex.html&amp;rft.pub=Institut+National+de+Recherche+en+Informatique+et+Automatique&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span></li>
<li><cite class="citation web"><a class="external text" href="http://c2.com/cgi/wiki?JoinCalculus" rel="nofollow">"JoinCalculus"</a>. Cunningham &amp; Cunningham, Inc. October 25, 2009<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-10-09</span></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.btitle=JoinCalculus&amp;rft.date=2009-10-25&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fc2.com%2Fcgi%2Fwiki%3FJoinCalculus&amp;rft.pub=Cunningham+%26+Cunningham%2C+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Fournet, Cédric; Gonthier, Georges; Levy, Jean-Jacques; Maranget, Luc (1996). <a class="external text" href="http://www.springerlink.com/index/PP23215G0035M6NQ.pdf" rel="nofollow">"A Calculus of Mobile Agents"</a> <span style="font-size:85%;">(PDF)</span>. Le Chesnay: Concurrency Theory: 406–421.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=A+Calculus+of+Mobile+Agents&amp;rft.aufirst=C%C3%A9dric&amp;rft.au=Gonthier%2C+Georges&amp;rft.aulast=Fournet&amp;rft.au=Levy%2C+Jean-Jacques&amp;rft.au=Maranget%2C+Luc&amp;rft.date=1996&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2FPP23215G0035M6NQ.pdf&amp;rft.pages=406-421&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Maludzinski, Slawomir; Dobrowolski, Grzegorz (2007). <a class="external text" href="http://link.springer.com/chapter/10.1007/978-3-540-75254-7_30" rel="nofollow">"Agent Environment and Knowledge in Distributed Join Calculus"</a>. <i>Lecture Notes in Computer Science</i>: 298–300. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a class="external text" href="//dx.doi.org/10.1007%2F978-3-540-75254-7_30" rel="nofollow">10.1007/978-3-540-75254-7_30</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Agent+Environment+and+Knowledge+in+Distributed+Join+Calculus&amp;rft.au=Dobrowolski%2C+Grzegorz&amp;rft.aufirst=Slawomir&amp;rft.aulast=Maludzinski&amp;rft.date=2007&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Flink.springer.com%2Fchapter%2F10.1007%2F978-3-540-75254-7_30&amp;rft_id=info%3Adoi%2F10.1007%2F978-3-540-75254-7_30&amp;rft.jtitle=Lecture+Notes+in+Computer+Science&amp;rft.pages=298-300&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Russio, Claudio (2007). <a class="external text" href="http://www.springerlink.com/index/V65136023860T854.pdf" rel="nofollow">"The Joins Concurrency Library"</a> <span style="font-size:85%;">(PDF)</span>. Cambridge: Practical Aspects of Declarative Languages: 260–274.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=The+Joins+Concurrency+Library&amp;rft.aufirst=Claudio&amp;rft.aulast=Russio&amp;rft.date=2007&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2FV65136023860T854.pdf&amp;rft.pages=260-274&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Maranget, Luc; Le Fessant, Fabrice (25 September 2007). <a class="external text" href="http://hevea.inria.fr/examples/pat.html" rel="nofollow">"Compiling Join-Patterns"</a>. Le Chesnay France.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Compiling+Join-Patterns&amp;rft.aufirst=Luc&amp;rft.aulast=Maranget&amp;rft.au=Le+Fessant%2C+Fabrice&amp;rft.date=2007-09-25&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fhevea.inria.fr%2Fexamples%2Fpat.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Haller, Phillip; Van Cutsem, Tom (2008). <a class="external text" href="http://www.springerlink.com/index/LP2R415110386762.pdf" rel="nofollow">"Implementing Joins using Extensible Pattern Matching"</a> <span style="font-size:85%;">(PDF)</span>. Lausanne: Coordination Models and Languages: 1–15.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Implementing+Joins+using+Extensible+Pattern+Matching&amp;rft.aufirst=Phillip&amp;rft.aulast=Haller&amp;rft.au=Van+Cutsem%2C+Tom&amp;rft.date=2008&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2FLP2R415110386762.pdf&amp;rft.pages=1-15&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Sulzmann, Martin; S. L. Lam, Edmund. <a class="external text" href="http://moscova.inria.fr/~maranget/papers/mobile.ps" rel="nofollow">"Parallel Join Patterns with Guards and Propagation"</a>. Denmark.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Parallel+Join+Patterns+with+Guards+and+Propagation&amp;rft.aufirst=Martin&amp;rft.aulast=Sulzmann&amp;rft.au=S.+L.+Lam%2C+Edmund&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fmoscova.inria.fr%2F~maranget%2Fpapers%2Fmobile.ps&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Fournet, Cédric; Gonthier, Georges (2002). <a class="external text" href="http://www.springerlink.com/index/RYTEWY8H1D2ARNPV.pdf" rel="nofollow">"The Join Calculus: a Language for Distributed Mobile Programming"</a> <span style="font-size:85%;">(PDF)</span>. Caminha: 1–66.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=The+Join+Calculus%3A+a+Language+for+Distributed+Mobile+Programming&amp;rft.aufirst=C%C3%A9dric&amp;rft.au=Gonthier%2C+Georges&amp;rft.aulast=Fournet&amp;rft.date=2002&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2FRYTEWY8H1D2ARNPV.pdf&amp;rft.pages=1-66&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Ma, Qin; Maranget, Luc (5 April 2004). <a class="external text" href="http://www.springerlink.com/index/0udcejpfmh745ad6.pdf" rel="nofollow">"Compiling Pattern Matching in Join-Patterns"</a> <span style="font-size:85%;">(PDF)</span>. INRIA: 417–431.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Compiling+Pattern+Matching+in+Join-Patterns&amp;rft.aufirst=Qin&amp;rft.aulast=Ma&amp;rft.au=Maranget%2C+Luc&amp;rft.date=2004-04-05&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2F0udcejpfmh745ad6.pdf&amp;rft.pages=417-431&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Singh, Satnam (6 January 2007). <a class="external text" href="https://urresearch.rochester.edu/fileDownloadForInstitutionalItem.action?itemId=3699&amp;itemFileId=5278" rel="nofollow">"Higher Order Combinators for Join Patterns using STM"</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Higher+Order+Combinators+for+Join+Patterns+using+STM&amp;rft.aufirst=Satnam&amp;rft.aulast=Singh&amp;rft.date=2007-01-06&amp;rft.genre=article&amp;rft_id=https%3A%2F%2Furresearch.rochester.edu%2FfileDownloadForInstitutionalItem.action%3FitemId%3D3699%26itemFileId%3D5278&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation" id="CITEREFMONSIEUR2010">MONSIEUR, Geert (2010), <a class="external text" href="https://lirias.kuleuven.be/handle/123456789/284037" rel="nofollow"><i>Pattern-based Coordination in Process-based Service Compositions</i></a>, Leuven Belgium: Katholiek Universiteit Leuven</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.aufirst=Geert&amp;rft.aulast=MONSIEUR&amp;rft.btitle=Pattern-based+Coordination+in+Process-based+Service+Compositions&amp;rft.date=2010&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Flirias.kuleuven.be%2Fhandle%2F123456789%2F284037&amp;rft.place=Leuven+Belgium&amp;rft.pub=Katholiek+Universiteit+Leuven&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Russo, Claudio V. (23 October 2008). <a class="external text" href="http://portal.acm.org/citation.cfm?doid=1449955.1449770" rel="nofollow">"Join Patterns for Visual Basic"</a>. Nashville, Tennessee, USA: 53–72.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Join+Patterns+for+Visual+Basic&amp;rft.aufirst=Claudio+V.&amp;rft.aulast=Russo&amp;rft.date=2008-10-23&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fportal.acm.org%2Fcitation.cfm%3Fdoid%3D1449955.1449770&amp;rft.pages=53-72&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Aaron, Turon; Russo, Claudio V. (27 October 2011). <a class="external text" href="http://research.microsoft.com/en-us/um/people/crusso/papers/scalablejoins.pdf" rel="nofollow">"Scalable Join Patterns"</a> <span style="font-size:85%;">(PDF)</span>. Portland, Oregon, USA.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Scalable+Join+Patterns&amp;rft.aufirst=Turon&amp;rft.aulast=Aaron&amp;rft.au=Russo%2C+Claudio+V.&amp;rft.date=2011-10-27&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fcrusso%2Fpapers%2Fscalablejoins.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
<li><cite class="citation journal">Guzev, Vadim B. (April 2008). <a class="external text" href="http://parallelcsharp.com/docs/conferences/PDPTA08/PDPTA08.pdf" rel="nofollow">"Parallel C#: The Usage of Chords and Higher-Order Functions in the Design of Parallel Programming Languages"</a> <span style="font-size:85%;">(PDF)</span>. Moscow, Russia.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Parallel+C%23%3A+The+Usage+of+Chords+and+Higher-Order+Functions+in+the+Design+of+Parallel+Programming+Languages&amp;rft.aufirst=Vadim+B.&amp;rft.aulast=Guzev&amp;rft.date=2008-04&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fparallelcsharp.com%2Fdocs%2Fconferences%2FPDPTA08%2FPDPTA08.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></li>
</ul>
</div>
<h2><span class="mw-headline" id="Notes">Notes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=36" title="Edit section: Notes">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist columns references-column-count references-column-count-3" style="-moz-column-count: 3; -webkit-column-count: 3; column-count: 3; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-Join_CalculusB-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-Join_CalculusB_1-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Taral Dragon (October 25, 2009). <a class="external text" href="http://c2.com/cgi/wiki?JoinCalculus" rel="nofollow">"Join Calculus"</a><span class="reference-accessdate">. Retrieved 2012</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.au=Taral+Dragon&amp;rft.btitle=Join+Calculus&amp;rft.date=2009-10-25&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fc2.com%2Fcgi%2Fwiki%3FJoinCalculus&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%">Check date values in: <code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> (<a href="/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><cite class="citation journal">Russo, Claudio V. (23 October 2008). <a class="external text" href="http://portal.acm.org/citation.cfm?doid=1449955.1449770" rel="nofollow">"Join Patterns for Visual Basic"</a>. Nashville, Tennessee, USA: 10.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Join+Patterns+for+Visual+Basic&amp;rft.aufirst=Claudio+V.&amp;rft.aulast=Russo&amp;rft.date=2008-10-23&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fportal.acm.org%2Fcitation.cfm%3Fdoid%3D1449955.1449770&amp;rft.pages=10&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-Join_CalculusA-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-Join_CalculusA_3-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a class="external text" href="http://www.parallelcsharp.com/" rel="nofollow">"Parallel C#"</a><span class="reference-accessdate">. Retrieved 2012</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.btitle=Parallel+C%23&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.parallelcsharp.com%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%">Check date values in: <code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> (<a href="/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><cite class="citation journal">Russo, Claudio V. "Join Patterns for Visual Basic": 2.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Join+Patterns+for+Visual+Basic&amp;rft.aufirst=Claudio+V.&amp;rft.aulast=Russo&amp;rft.genre=article&amp;rft.pages=2&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><cite class="citation journal">Fournet, Cédric; Gonthier, Georges (2002). <a class="external text" href="http://www.springerlink.com/index/RYTEWY8H1D2ARNPV.pdf" rel="nofollow">"The Join Calculus: a Language for Distributed Mobile Programming"</a> <span style="font-size:85%;">(PDF)</span>. Caminha: 8.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=The+Join+Calculus%3A+a+Language+for+Distributed+Mobile+Programming&amp;rft.aufirst=C%C3%A9dric&amp;rft.au=Gonthier%2C+Georges&amp;rft.aulast=Fournet&amp;rft.date=2002&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2FRYTEWY8H1D2ARNPV.pdf&amp;rft.pages=8&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo-6"><span class="mw-cite-backlink">^ <a href="#cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-3"><sup><i><b>d</b></i></sup></a> <a href="#cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-4"><sup><i><b>e</b></i></sup></a> <a href="#cite_ref-FOOTNOTEJoin_Patterns_for_Visual_BasicClaudio_V._Russo_6-5"><sup><i><b>f</b></i></sup></a></span> <span class="reference-text"><a href="#CITEREFJoin_Patterns_for_Visual_BasicClaudio_V._Russo">Join Patterns for Visual Basic Claudio V. Russo</a>.</span></li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><cite class="citation journal">Russo, Claudio V. (23 October 2008). <a class="external text" href="http://portal.acm.org/citation.cfm?doid=1449955.1449770" rel="nofollow">"Join Patterns for Visual Basic"</a>. Nashville, Tennessee, USA: 5.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Join+Patterns+for+Visual+Basic&amp;rft.aufirst=Claudio+V.&amp;rft.aulast=Russo&amp;rft.date=2008-10-23&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fportal.acm.org%2Fcitation.cfm%3Fdoid%3D1449955.1449770&amp;rft.pages=5&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text"><cite class="citation journal">Russo, Claudio V. (23 October 2008). <a class="external text" href="http://portal.acm.org/citation.cfm?doid=1449955.1449770" rel="nofollow">"Join Patterns for Visual Basic"</a>. Nashville, Tennessee, USA: 18.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Join+Patterns+for+Visual+Basic&amp;rft.aufirst=Claudio+V.&amp;rft.aulast=Russo&amp;rft.date=2008-10-23&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fportal.acm.org%2Fcitation.cfm%3Fdoid%3D1449955.1449770&amp;rft.pages=18&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-Compiling_Join-Patterns-9"><span class="mw-cite-backlink">^ <a href="#cite_ref-Compiling_Join-Patterns_9-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Compiling_Join-Patterns_9-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Compiling_Join-Patterns_9-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Maranget, Luc; Le Fessant, Fabrice (25 September 2007). <a class="external text" href="http://hevea.inria.fr/examples/pat.html" rel="nofollow">"Compiling Join-Patterns"</a>. Le Chesnay France.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Compiling+Join-Patterns&amp;rft.aufirst=Luc&amp;rft.aulast=Maranget&amp;rft.au=Le+Fessant%2C+Fabrice&amp;rft.date=2007-09-25&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fhevea.inria.fr%2Fexamples%2Fpat.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-mobileagents-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-mobileagents_10-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">Fournet, Cédric; Gonthier, Georges; Levy, Jean-Jacques; Maranget, Luc (1996). <a class="external text" href="http://www.springerlink.com/index/PP23215G0035M6NQ.pdf" rel="nofollow">"A Calculus of Mobile Agents"</a> <span style="font-size:85%;">(PDF)</span>. Le Chesnay: Concurrency Theory: 406–421.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=A+Calculus+of+Mobile+Agents&amp;rft.aufirst=C%C3%A9dric&amp;rft.au=Gonthier%2C+Georges&amp;rft.aulast=Fournet&amp;rft.au=Levy%2C+Jean-Jacques&amp;rft.au=Maranget%2C+Luc&amp;rft.date=1996&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2FPP23215G0035M6NQ.pdf&amp;rft.pages=406-421&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><cite class="citation journal">Fournet, Cedric; Le Fessant, Fabrice; Maranget, Luc; Schmitt, A. (September 2000). "JoCaml: a language for concurrent distributed and mobile programming.". <i>In Advanced Functional Programming, 4th International SchoolOxford, August 2002</i>. <b>2638</b>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=JoCaml%3A+a+language+for+concurrent+distributed+and+mobile+programming.&amp;rft.aufirst=Cedric&amp;rft.aulast=Fournet&amp;rft.au=Le+Fessant%2C+Fabrice&amp;rft.au=Maranget%2C+Luc&amp;rft.au=Schmitt%2C+A.&amp;rft.date=2000-09&amp;rft.genre=article&amp;rft.jtitle=In+Advanced+Functional+Programming%2C+4th+International+SchoolOxford%2C+August+2002&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=2638"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text"><cite class="citation journal">Conchon, S.; Le Fessant, F. (1999). "JoCaml: Mobile agents for Objective-Caml". <i>In First International Symposium on AgentSystems and Applications. (ASA'99)/Third International Symposium onMobile Agents (MA'99)</i>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=JoCaml%3A+Mobile+agents+for+Objective-Caml&amp;rft.aufirst=S.&amp;rft.aulast=Conchon&amp;rft.au=Le+Fessant%2C+F.&amp;rft.date=1999&amp;rft.genre=article&amp;rft.jtitle=In+First+International+Symposium+on+AgentSystems+and+Applications.+%28ASA%2799%29%2FThird+International+Symposium+onMobile+Agents+%28MA%2799%29&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><cite class="citation journal">Odersky, Martin (September 2000). "An overview of functional nets.". <i>Summer School, Caminha, Portugal, September 2000</i>. <b>2395</b>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=An+overview+of+functional+nets.&amp;rft.aufirst=Martin&amp;rft.aulast=Odersky&amp;rft.date=2000-09&amp;rft.genre=article&amp;rft.jtitle=Summer+School%2C+Caminha%2C+Portugal%2C+September+2000&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=2395"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><cite class="citation journal">Odersky, Martin (2000). "Functional nets.". <i>In Proceedings of the European Symposium on Programming. Lecture Notes in Computer Science</i>. <b>1782</b>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Functional+nets.&amp;rft.aufirst=Martin&amp;rft.aulast=Odersky&amp;rft.date=2000&amp;rft.genre=article&amp;rft.jtitle=In+Proceedings+of+the+European+Symposium+on+Programming.+Lecture+Notes+in+Computer+Science&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=1782"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-15">^</a></b></span> <span class="reference-text"><cite class="citation journal">Itzstein, G. S.; Kearney, D. (2001). "Join Java: An alternative concurrency semantics for Java". <i>Echnical Report ACRC-01-001, University of South Australia</i>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Join+Java%3A+An+alternative+concurrency+semantics+for+Java&amp;rft.aufirst=G.+S.&amp;rft.au=Kearney%2C+D.&amp;rft.aulast=Itzstein&amp;rft.date=2001&amp;rft.genre=article&amp;rft.jtitle=Echnical+Report+ACRC-01-001%2C+University+of+South+Australia&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><cite class="citation journal">Benton, N.; Fournet, C. (June 2002). "Modern concurrency abstractions for C#.". <i>In Proceedings of the 16th European Conference on Object-Oriented Programming (ECOOP 2002), number 2374 in LNCS</i>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Modern+concurrency+abstractions+for+C%23.&amp;rft.aufirst=N.&amp;rft.au=Fournet%2C+C.&amp;rft.aulast=Benton&amp;rft.date=2002-06&amp;rft.genre=article&amp;rft.jtitle=In+Proceedings+of+the+16th+European+Conference+on+Object-Oriented+Programming+%28ECOOP+2002%29%2C+number+2374+in+LNCS&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-17"><span class="mw-cite-backlink"><b><a href="#cite_ref-17">^</a></b></span> <span class="reference-text"><cite class="citation journal">Benton, N.; Cardelli, L. (2004). "Modern Concurrency Abstractions for C#. ACM Transactions on Programming Languages and Systems". <b>26</b>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Modern+Concurrency+Abstractions+for+C%23.+ACM+Transactions+on+Programming+Languages+and+Systems&amp;rft.au=Cardelli%2C+L.&amp;rft.aufirst=N.&amp;rft.aulast=Benton&amp;rft.date=2004&amp;rft.genre=article&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=26"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-18"><span class="mw-cite-backlink"><b><a href="#cite_ref-18">^</a></b></span> <span class="reference-text"><cite class="citation journal">Singh, Satnam (6 January 2007). <a class="external text" href="https://urresearch.rochester.edu/fileDownloadForInstitutionalItem.action?itemId=3699&amp;itemFileId=5278" rel="nofollow">"Higher Order Combinators for Join Patterns using STM"</a>: 1.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Higher+Order+Combinators+for+Join+Patterns+using+STM&amp;rft.aufirst=Satnam&amp;rft.aulast=Singh&amp;rft.date=2007-01-06&amp;rft.genre=article&amp;rft_id=https%3A%2F%2Furresearch.rochester.edu%2FfileDownloadForInstitutionalItem.action%3FitemId%3D3699%26itemFileId%3D5278&amp;rft.pages=1&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-Scalable_Join_Patterns-19"><span class="mw-cite-backlink">^ <a href="#cite_ref-Scalable_Join_Patterns_19-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Scalable_Join_Patterns_19-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Aaron, Turon; Russo, Claudio V. (27 October 2011). <a class="external text" href="http://research.microsoft.com/en-us/um/people/crusso/papers/scalablejoins.pdf" rel="nofollow">"Scalable Join Patterns"</a> <span style="font-size:85%;">(PDF)</span>. Portland, Oregon, USA: 4.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Scalable+Join+Patterns&amp;rft.aufirst=Turon&amp;rft.aulast=Aaron&amp;rft.au=Russo%2C+Claudio+V.&amp;rft.date=2011-10-27&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fcrusso%2Fpapers%2Fscalablejoins.pdf&amp;rft.pages=4&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-20"><span class="mw-cite-backlink"><b><a href="#cite_ref-20">^</a></b></span> <span class="reference-text"><cite class="citation journal">Aaron, Turon; Russo, Claudio V. (27 October 2011). <a class="external text" href="http://research.microsoft.com/en-us/um/people/crusso/papers/scalablejoins.pdf" rel="nofollow">"Scalable Join Patterns"</a> <span style="font-size:85%;">(PDF)</span>. Portland, Oregon, USA: 1.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Scalable+Join+Patterns&amp;rft.aufirst=Turon&amp;rft.aulast=Aaron&amp;rft.au=Russo%2C+Claudio+V.&amp;rft.date=2011-10-27&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fcrusso%2Fpapers%2Fscalablejoins.pdf&amp;rft.pages=1&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-research.microsoft.com-21"><span class="mw-cite-backlink">^ <a href="#cite_ref-research.microsoft.com_21-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-research.microsoft.com_21-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Aaron, Turon; Russo, Claudio V. (27 October 2011). <a class="external text" href="http://research.microsoft.com/en-us/um/people/crusso/papers/scalablejoins.pdf" rel="nofollow">"Scalable Join Patterns"</a> <span style="font-size:85%;">(PDF)</span>. Portland, Oregon, USA: 3.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Scalable+Join+Patterns&amp;rft.aufirst=Turon&amp;rft.aulast=Aaron&amp;rft.au=Russo%2C+Claudio+V.&amp;rft.date=2011-10-27&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fcrusso%2Fpapers%2Fscalablejoins.pdf&amp;rft.pages=3&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-22">^</a></b></span> <span class="reference-text"><cite class="citation journal">Aaron, Turon; Russo, Claudio V. (27 October 2011). <a class="external text" href="http://research.microsoft.com/en-us/um/people/crusso/papers/scalablejoins.pdf" rel="nofollow">"Scalable Join Patterns"</a> <span style="font-size:85%;">(PDF)</span>. Portland, Oregon, USA: 2.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Scalable+Join+Patterns&amp;rft.aufirst=Turon&amp;rft.aulast=Aaron&amp;rft.au=Russo%2C+Claudio+V.&amp;rft.date=2011-10-27&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fcrusso%2Fpapers%2Fscalablejoins.pdf&amp;rft.pages=2&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-A_Calculus_of_Mobile_Agents-23"><span class="mw-cite-backlink">^ <a href="#cite_ref-A_Calculus_of_Mobile_Agents_23-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-A_Calculus_of_Mobile_Agents_23-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-A_Calculus_of_Mobile_Agents_23-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Fournet, Cédric; Gonthier, Georges; Levy, Jean-Jacques; Maranget, Luc; Remy, Didier (1996). <a class="external text" href="http://www.springerlink.com/index/PP23215G0035M6NQ.pdf" rel="nofollow">"A Calculus of Mobile Agents"</a> <span style="font-size:85%;">(PDF)</span>. Le Chesnay: Concurrency Theory.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=A+Calculus+of+Mobile+Agents&amp;rft.aufirst=C%C3%A9dric&amp;rft.au=Gonthier%2C+Georges&amp;rft.aulast=Fournet&amp;rft.au=Levy%2C+Jean-Jacques&amp;rft.au=Maranget%2C+Luc&amp;rft.au=Remy%2C+Didier&amp;rft.date=1996&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2FPP23215G0035M6NQ.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-24"><span class="mw-cite-backlink"><b><a href="#cite_ref-24">^</a></b></span> <span class="reference-text"><cite class="citation journal">Maludzinski, Slawomir; Dobrowolski, Grzegorz (2007). <a class="external text" href="http://link.springer.com/chapter/10.1007/978-3-540-75254-7_30" rel="nofollow">"Multi-Agent Systems and Applications V"</a>. <i>Lecture Notes in Computer Science</i>. Lecture Notes in Computer Science. <b>4696</b>: 298–300. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a class="external text" href="//dx.doi.org/10.1007%2F978-3-540-75254-7_30" rel="nofollow">10.1007/978-3-540-75254-7_30</a>. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="/wiki/Special:BookSources/978-3-540-75253-0" title="Special:BookSources/978-3-540-75253-0">978-3-540-75253-0</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Multi-Agent+Systems+and+Applications+V&amp;rft.au=Dobrowolski%2C+Grzegorz&amp;rft.aufirst=Slawomir&amp;rft.aulast=Maludzinski&amp;rft.date=2007&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Flink.springer.com%2Fchapter%2F10.1007%2F978-3-540-75254-7_30&amp;rft_id=info%3Adoi%2F10.1007%2F978-3-540-75254-7_30&amp;rft.isbn=978-3-540-75253-0&amp;rft.jtitle=Lecture+Notes+in+Computer+Science&amp;rft.pages=298-300&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=4696"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%"><code style="color:inherit; border:inherit; padding:inherit;">|chapter=</code> ignored (<a href="/wiki/Help:CS1_errors#chapter_ignored" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-25"><span class="mw-cite-backlink"><b><a href="#cite_ref-25">^</a></b></span> <span class="reference-text"><cite class="citation journal">Ma, Qin; Maranget, Luc (5 April 2004). <a class="external text" href="http://www.springerlink.com/index/0udcejpfmh745ad6.pdf" rel="nofollow">"Compiling Pattern Matching in Join-Patterns"</a> <span style="font-size:85%;">(PDF)</span>. INRIA: 417–431.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Compiling+Pattern+Matching+in+Join-Patterns&amp;rft.aufirst=Qin&amp;rft.aulast=Ma&amp;rft.au=Maranget%2C+Luc&amp;rft.date=2004-04-05&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2F0udcejpfmh745ad6.pdf&amp;rft.pages=417-431&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-Implementing_Joins_Using_Extensible_Pattern_Matching-26"><span class="mw-cite-backlink">^ <a href="#cite_ref-Implementing_Joins_Using_Extensible_Pattern_Matching_26-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Implementing_Joins_Using_Extensible_Pattern_Matching_26-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Implementing_Joins_Using_Extensible_Pattern_Matching_26-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Haller, Phillip; Van Cutsem, Tom (2008). <a class="external text" href="http://www.springerlink.com/index/LP2R415110386762.pdf" rel="nofollow">"Implementing Joins using Extensible Pattern Matching"</a> <span style="font-size:85%;">(PDF)</span>. Lausanne: Coordination Models and Languages: 1–15.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Implementing+Joins+using+Extensible+Pattern+Matching&amp;rft.aufirst=Phillip&amp;rft.aulast=Haller&amp;rft.au=Van+Cutsem%2C+Tom&amp;rft.date=2008&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2FLP2R415110386762.pdf&amp;rft.pages=1-15&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-Join_Patterns_for_Visual_Basic-27"><span class="mw-cite-backlink">^ <a href="#cite_ref-Join_Patterns_for_Visual_Basic_27-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Join_Patterns_for_Visual_Basic_27-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Join_Patterns_for_Visual_Basic_27-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Russo, Claudio V. (23 October 2008). <a class="external text" href="http://portal.acm.org/citation.cfm?doid=1449955.1449770" rel="nofollow">"Join Patterns for Visual Basic"</a>. Nashville, Tennessee, USA: 53–72.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Join+Patterns+for+Visual+Basic&amp;rft.aufirst=Claudio+V.&amp;rft.aulast=Russo&amp;rft.date=2008-10-23&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fportal.acm.org%2Fcitation.cfm%3Fdoid%3D1449955.1449770&amp;rft.pages=53-72&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-scheme-28"><span class="mw-cite-backlink">^ <a href="#cite_ref-scheme_28-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-scheme_28-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-scheme_28-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Sulzmann, Martin; S. L. Lam, Edmund. <a class="external text" href="http://moscova.inria.fr/~maranget/papers/mobile.ps" rel="nofollow">"Parallel Join Patterns with Guards and Propagation"</a>. Denmark.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Parallel+Join+Patterns+with+Guards+and+Propagation&amp;rft.aufirst=Martin&amp;rft.aulast=Sulzmann&amp;rft.au=S.+L.+Lam%2C+Edmund&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fmoscova.inria.fr%2F~maranget%2Fpapers%2Fmobile.ps&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-Join_Java-29"><span class="mw-cite-backlink"><b><a href="#cite_ref-Join_Java_29-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">Hopf, J.; von Itzstein, G.; Stewart, al. (2002). <a class="external text" href="http://ura.unisa.edu.au/R/?func=dbin-jump-full&amp;object_id=unisa36854" rel="nofollow">"Hardware Join Java: A High Level Language For Reconfigurable Hardware Development"</a>. Hong Kong.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Hardware+Join+Java%3A+A+High+Level+Language+For+Reconfigurable+Hardware+Development&amp;rft.aufirst=J.&amp;rft.aulast=Hopf&amp;rft.au=Stewart%2C+al.&amp;rft.au=von+Itzstein%2C+G.&amp;rft.date=2002&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fura.unisa.edu.au%2FR%2F%3Ffunc%3Ddbin-jump-full%26object_id%3Dunisa36854&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-JErlang-30"><span class="mw-cite-backlink"><b><a href="#cite_ref-JErlang_30-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">Plociniczak, Hubert; Eisenbach, Susan (2009). <a class="external text" href="http://www.doc.ic.ac.uk/~susan/jerlang/jerlang-coord2010.pdf" rel="nofollow">"JErlang: Erlang with Joins"</a> <span style="font-size:85%;">(PDF)</span>. London.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=JErlang%3A+Erlang+with+Joins&amp;rft.au=Eisenbach%2C+Susan&amp;rft.aufirst=Hubert&amp;rft.aulast=Plociniczak&amp;rft.date=2009&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.doc.ic.ac.uk%2F~susan%2Fjerlang%2Fjerlang-coord2010.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-31"><span class="mw-cite-backlink"><b><a href="#cite_ref-31">^</a></b></span> <span class="reference-text"><cite class="citation web">Liu, Yigong (2007–2009). <a class="external text" href="http://channel.sourceforge.net/" rel="nofollow">"Join - Asynchronous Message Coordination and Concurrency Library"</a><span class="reference-accessdate">. Retrieved 2012</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.aufirst=Yigong&amp;rft.aulast=Liu&amp;rft.btitle=Join+-+Asynchronous+Message+Coordination+and+Concurrency+Library&amp;rft.date=2007%2F2009&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fchannel.sourceforge.net%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%">Check date values in: <code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> (<a href="/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-32"><span class="mw-cite-backlink"><b><a href="#cite_ref-32">^</a></b></span> <span class="reference-text"><cite class="citation web"><a class="external text" href="http://research.microsoft.com/en-us/um/people/nick/polyphony/intro.htm" rel="nofollow">"Introduction to Polyphonic C#"</a><span class="reference-accessdate">. Retrieved 2012</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.btitle=Introduction+to+Polyphonic+C%23&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fnick%2Fpolyphony%2Fintro.htm&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%">Check date values in: <code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> (<a href="/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-33"><span class="mw-cite-backlink"><b><a href="#cite_ref-33">^</a></b></span> <span class="reference-text"><cite class="citation web"><a class="external text" href="http://www.parallelcsharp.com/tests/tests.htm" rel="nofollow">"Parallel C#"</a><span class="reference-accessdate">. Retrieved 2012</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.btitle=Parallel+C%23&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.parallelcsharp.com%2Ftests%2Ftests.htm&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%">Check date values in: <code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> (<a href="/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-34"><span class="mw-cite-backlink"><b><a href="#cite_ref-34">^</a></b></span> <span class="reference-text"><cite class="citation web"><a class="external text" href="http://research.microsoft.com/apps/pubs/default.aspx?id=67944" rel="nofollow">"The Joins Concurrency Library"</a><span class="reference-accessdate">. Retrieved 2012</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.btitle=The+Joins+Concurrency+Library&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fapps%2Fpubs%2Fdefault.aspx%3Fid%3D67944&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%">Check date values in: <code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> (<a href="/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-35"><span class="mw-cite-backlink"><b><a href="#cite_ref-35">^</a></b></span> <span class="reference-text"><cite class="citation web"><a class="external text" href="http://research.microsoft.com/en-us/um/cambridge/projects/comega/" rel="nofollow">"Comega"</a><span class="reference-accessdate">. Retrieved 2012</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.btitle=Comega&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fcambridge%2Fprojects%2Fcomega%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%">Check date values in: <code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> (<a href="/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-36"><span class="mw-cite-backlink"><b><a href="#cite_ref-36">^</a></b></span> <span class="reference-text"><cite class="citation journal">Aaron, Turon; Russo, Claudio V. (27 October 2011). <a class="external text" href="http://research.microsoft.com/en-us/um/people/crusso/papers/scalablejoins.pdf" rel="nofollow">"Scalable Join Patterns"</a> <span style="font-size:85%;">(PDF)</span>. Portland, Oregon, USA.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Scalable+Join+Patterns&amp;rft.aufirst=Turon&amp;rft.aulast=Aaron&amp;rft.au=Russo%2C+Claudio+V.&amp;rft.date=2011-10-27&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fcrusso%2Fpapers%2Fscalablejoins.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-jocaml-37"><span class="mw-cite-backlink"><b><a href="#cite_ref-jocaml_37-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">Fournet, Cedric; Le Fessant, Fabrice; Maranget, Luc; Schmitt, Alan (2003). "JoCaml: a Language for Concurrent Distributed and Mobile Programming". <i>Springer-Verlag</i>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=JoCaml%3A+a+Language+for+Concurrent+Distributed+and+Mobile+Programming&amp;rft.aufirst=Cedric&amp;rft.aulast=Fournet&amp;rft.au=Le+Fessant%2C+Fabrice&amp;rft.au=Maranget%2C+Luc&amp;rft.au=Schmitt%2C+Alan&amp;rft.date=2003&amp;rft.genre=article&amp;rft.jtitle=Springer-Verlag&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-38"><span class="mw-cite-backlink"><b><a href="#cite_ref-38">^</a></b></span> <span class="reference-text"><a class="external text" href="http://www.cs.nott.ac.uk/~nhn/TFP2006/Papers/31-HammondMichaelsonSun-EA2-ProgrammingReactiveSystemsInHume.pdf" rel="nofollow">Hammond/Michaelson/Sun - Programming reactive systems in Hume</a></span></li>
<li id="cite_note-39"><span class="mw-cite-backlink"><b><a href="#cite_ref-39">^</a></b></span> <span class="reference-text"><cite class="citation web"><a class="external text" href="http://research.microsoft.com/en-us/projects/concurrentbasic/default.aspx" rel="nofollow">"Concurrent Basic"</a><span class="reference-accessdate">. Retrieved 2012</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.btitle=Concurrent+Basic&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fprojects%2Fconcurrentbasic%2Fdefault.aspx&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%">Check date values in: <code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> (<a href="/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-40"><span class="mw-cite-backlink"><b><a href="#cite_ref-40">^</a></b></span> <span class="reference-text"><cite class="citation journal">Russio, Claudio (2007). <a class="external text" href="http://www.springerlink.com/index/V65136023860T854.pdf" rel="nofollow">"The Joins Concurrency Library"</a> <span style="font-size:85%;">(PDF)</span>. Cambridge: Practical Aspects of Declarative Languages: 260–274.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=The+Joins+Concurrency+Library&amp;rft.aufirst=Claudio&amp;rft.aulast=Russio&amp;rft.date=2007&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Findex%2FV65136023860T854.pdf&amp;rft.pages=260-274&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-41"><span class="mw-cite-backlink"><b><a href="#cite_ref-41">^</a></b></span> <span class="reference-text"><cite class="citation web"><a class="external text" href="http://research.microsoft.com/en-us/um/people/crusso/joins/" rel="nofollow">"The Joins Concurrency Library"</a><span class="reference-accessdate">. Retrieved 2012</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.btitle=The+Joins+Concurrency+Library&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fcrusso%2Fjoins%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span> <span class="error citation-comment" style="font-size:100%">Check date values in: <code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> (<a href="/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-actorScala-42"><span class="mw-cite-backlink"><b><a href="#cite_ref-actorScala_42-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">Haller, Phillip; Odersky, Martin (June 2007). "Actors that unify threads and events". In Proc. COORDINATION, LNCS.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.atitle=Actors+that+unify+threads+and+events&amp;rft.aufirst=Phillip&amp;rft.aulast=Haller&amp;rft.au=Odersky%2C+Martin&amp;rft.date=2007-06&amp;rft.genre=article&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-43"><span class="mw-cite-backlink"><b><a href="#cite_ref-43">^</a></b></span> <span class="reference-text"><cite class="citation" id="CITEREFMONSIEUR2010">MONSIEUR, Geert (2010), <a class="external text" href="https://lirias.kuleuven.be/handle/123456789/284037" rel="nofollow"><i>Pattern-based Coordination in Process-based Service Compositions</i></a>, Leuven Belgium: Katholiek Universiteit Leuven, p. 68</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.aufirst=Geert&amp;rft.aulast=MONSIEUR&amp;rft.btitle=Pattern-based+Coordination+in+Process-based+Service+Compositions&amp;rft.date=2010&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Flirias.kuleuven.be%2Fhandle%2F123456789%2F284037&amp;rft.pages=68&amp;rft.place=Leuven+Belgium&amp;rft.pub=Katholiek+Universiteit+Leuven&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-44"><span class="mw-cite-backlink"><b><a href="#cite_ref-44">^</a></b></span> <span class="reference-text"><cite class="citation" id="CITEREFMONSIEUR2010">MONSIEUR, Geert (2010), <a class="external text" href="https://lirias.kuleuven.be/handle/123456789/284037" rel="nofollow"><i>Pattern-based Coordination in Process-based Service Compositions</i></a>, Leuven Belgium: Katholiek Universiteit Leuven, p. 70</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AJoin-pattern&amp;rft.aufirst=Geert&amp;rft.aulast=MONSIEUR&amp;rft.btitle=Pattern-based+Coordination+in+Process-based+Service+Compositions&amp;rft.date=2010&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Flirias.kuleuven.be%2Fhandle%2F123456789%2F284037&amp;rft.pages=70&amp;rft.place=Leuven+Belgium&amp;rft.pub=Katholiek+Universiteit+Leuven&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Join-pattern&amp;action=edit&amp;section=37" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a class="external text" href="http://research.microsoft.com/en-us/projects/concurrentbasic/default.aspx" rel="nofollow">Concurrent Basic</a></li>
<li><a class="external text" href="http://research.microsoft.com/en-us/projects/scalablejoins/" rel="nofollow">Scalable Joins</a></li>
<li><a class="external text" href="http://research.microsoft.com/en-us/um/people/crusso/joins/" rel="nofollow">The Joins Concurrency Library</a></li>
<li>INRIA, <a class="external text" href="http://moscova.inria.fr/join/index.shtml" rel="nofollow">Join Calculus homepage</a></li>
</ul>
<div aria-labelledby="Software_design_patterns" class="navbox" role="navigation" style="padding:3px">
<table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
<tr>
<th class="navbox-title" colspan="2" scope="col">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="/wiki/Template:Design_Patterns_patterns" title="Template:Design Patterns patterns"><abbr style=";;background:none transparent;border:none;" title="View this template">v</abbr></a></li>
<li class="nv-talk"><a href="/wiki/Template_talk:Design_Patterns_patterns" title="Template talk:Design Patterns patterns"><abbr style=";;background:none transparent;border:none;" title="Discuss this template">t</abbr></a></li>
<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Design_Patterns_patterns&amp;action=edit"><abbr style=";;background:none transparent;border:none;" title="Edit this template">e</abbr></a></li>
</ul>
</div>
<div id="Software_design_patterns" style="font-size:114%"><a href="/wiki/Software_design_pattern" title="Software design pattern">Software design patterns</a></div>
</th>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row"><a href="/wiki/Design_Patterns" title="Design Patterns">Gang of Four<br/>
patterns</a></th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em"></div>
<table class="nowraplinks navbox-subgroup" style="border-spacing:0">
<tr>
<th class="navbox-group" scope="row" style="padding-left:0;padding-right:0;">
<div style="padding:0em 0.75em;"><a href="/wiki/Creational_pattern" title="Creational pattern">Creational</a></div>
</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a></li>
<li><a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a></li>
<li><a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory method</a></li>
<li><a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a></li>
<li><a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row" style="padding-left:0;padding-right:0;">
<div style="padding:0em 0.75em;"><a href="/wiki/Structural_pattern" title="Structural pattern">Structural</a></div>
</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a></li>
<li><a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a></li>
<li><a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a></li>
<li><a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a></li>
<li><a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a></li>
<li><a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a></li>
<li><a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row" style="padding-left:0;padding-right:0;">
<div style="padding:0em 0.75em;"><a href="/wiki/Behavioral_pattern" title="Behavioral pattern">Behavioral</a></div>
</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a></li>
<li><a href="/wiki/Command_pattern" title="Command pattern">Command</a></li>
<li><a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a></li>
<li><a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a></li>
<li><a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a></li>
<li><a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a></li>
<li><a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a></li>
<li><a href="/wiki/State_pattern" title="State pattern">State</a></li>
<li><a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a></li>
<li><a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a></li>
<li><a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row"><a href="/wiki/Concurrency_pattern" title="Concurrency pattern">Concurrency<br/>
patterns</a></th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Active_object" title="Active object">Active object</a></li>
<li><a href="/wiki/Balking_pattern" title="Balking pattern">Balking</a></li>
<li><a href="/wiki/Binding_properties_pattern" title="Binding properties pattern">Binding properties</a></li>
<li><a href="/wiki/Double-checked_locking" title="Double-checked locking">Double-checked locking</a></li>
<li><a href="/wiki/Asynchronous_method_invocation" title="Asynchronous method invocation">Event-based asynchronous</a></li>
<li><a href="/wiki/Guarded_suspension" title="Guarded suspension">Guarded suspension</a></li>
<li><strong class="selflink">Join</strong></li>
<li><a class="mw-redirect" href="/wiki/Lock_pattern" title="Lock pattern">Lock</a></li>
<li><a href="/wiki/Monitor_(synchronization)" title="Monitor (synchronization)">Monitor</a></li>
<li><a href="/wiki/Proactor_pattern" title="Proactor pattern">Proactor</a></li>
<li><a href="/wiki/Reactor_pattern" title="Reactor pattern">Reactor</a></li>
<li><a href="/wiki/Readers%E2%80%93writer_lock" title="Readers–writer lock">Read write lock</a></li>
<li><a class="mw-redirect" href="/wiki/Scheduler_pattern" title="Scheduler pattern">Scheduler</a></li>
<li><a class="mw-redirect" href="/wiki/Thread_pool_pattern" title="Thread pool pattern">Thread pool</a></li>
<li><a href="/wiki/Thread-local_storage" title="Thread-local storage">Thread-local storage</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row"><a href="/wiki/Architectural_pattern" title="Architectural pattern">Architectural<br/>
patterns</a></th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Front_controller" title="Front controller">Front controller</a></li>
<li><a href="/wiki/Interceptor_pattern" title="Interceptor pattern">Interceptor</a></li>
<li><a href="/wiki/Model%E2%80%93view%E2%80%93controller" title="Model–view–controller">MVC</a></li>
<li><a href="/wiki/Multitier_architecture" title="Multitier architecture"><i>n</i>-tier</a></li>
<li><a href="/wiki/Specification_pattern" title="Specification pattern">Specification</a></li>
<li><a href="/wiki/Publish%E2%80%93subscribe_pattern" title="Publish–subscribe pattern">Publish–subscribe</a></li>
<li><a href="/wiki/Naked_objects" title="Naked objects">Naked objects</a></li>
<li><a href="/wiki/Service_locator_pattern" title="Service locator pattern">Service locator</a></li>
<li><a href="/wiki/Active_record_pattern" title="Active record pattern">Active record</a></li>
<li><a href="/wiki/Identity_map_pattern" title="Identity map pattern">Identity map</a></li>
<li><a href="/wiki/Data_access_object" title="Data access object">Data access object</a></li>
<li><a href="/wiki/Data_transfer_object" title="Data transfer object">Data transfer object</a></li>
<li><a class="new" href="/w/index.php?title=Action%E2%80%93Domain%E2%80%93Responder&amp;action=edit&amp;redlink=1" title="Action–Domain–Responder (page does not exist)">ADR</a></li>
<li><a href="/wiki/Inversion_of_control" title="Inversion of control">Inversion of control</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">Other<br/>
patterns</th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a class="mw-redirect" href="/wiki/Blackboard_design_pattern" title="Blackboard design pattern">Blackboard</a></li>
<li><a href="/wiki/Business_delegate_pattern" title="Business delegate pattern">Business delegate</a></li>
<li><a href="/wiki/Composite_entity_pattern" title="Composite entity pattern">Composite entity</a></li>
<li><a href="/wiki/Dependency_injection" title="Dependency injection">Dependency injection</a></li>
<li><a href="/wiki/Intercepting_filter_pattern" title="Intercepting filter pattern">Intercepting filter</a></li>
<li><a href="/wiki/Lazy_loading" title="Lazy loading">Lazy loading</a></li>
<li><a href="/wiki/Mock_object" title="Mock object">Mock object</a></li>
<li><a class="mw-redirect" href="/wiki/Null_object_pattern" title="Null object pattern">Null object</a></li>
<li><a href="/wiki/Object_pool_pattern" title="Object pool pattern">Object pool</a></li>
<li><a href="/wiki/Servant_(design_pattern)" title="Servant (design pattern)">Servant</a></li>
<li><a href="/wiki/Twin_pattern" title="Twin pattern">Twin</a></li>
<li><a href="/wiki/Type_Tunnel_pattern" title="Type Tunnel pattern">Type tunnel</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">Books</th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><i><a href="/wiki/Design_Patterns" title="Design Patterns">Design Patterns</a></i></li>
<li><i><a href="/wiki/Enterprise_Integration_Patterns" title="Enterprise Integration Patterns">Enterprise Integration Patterns</a></i></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">People</th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Christopher_Alexander" title="Christopher Alexander">Christopher Alexander</a></li>
<li><a href="/wiki/Erich_Gamma" title="Erich Gamma">Erich Gamma</a></li>
<li><a href="/wiki/Ralph_Johnson_(computer_scientist)" title="Ralph Johnson (computer scientist)">Ralph Johnson</a></li>
<li><a href="/wiki/John_Vlissides" title="John Vlissides">John Vlissides</a></li>
<li><a href="/wiki/Grady_Booch" title="Grady Booch">Grady Booch</a></li>
<li><a href="/wiki/Kent_Beck" title="Kent Beck">Kent Beck</a></li>
<li><a href="/wiki/Ward_Cunningham" title="Ward Cunningham">Ward Cunningham</a></li>
<li><a href="/wiki/Martin_Fowler" title="Martin Fowler">Martin Fowler</a></li>
<li><a href="/wiki/Robert_Cecil_Martin" title="Robert Cecil Martin">Robert Martin</a></li>
<li><a href="/wiki/Jim_Coplien" title="Jim Coplien">Jim Coplien</a></li>
<li><a href="/wiki/Douglas_C._Schmidt" title="Douglas C. Schmidt">Douglas Schmidt</a></li>
<li><a href="/wiki/Linda_Rising" title="Linda Rising">Linda Rising</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">Communities</th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/The_Hillside_Group" title="The Hillside Group">The Hillside Group</a></li>
<li><a href="/wiki/Portland_Pattern_Repository" title="Portland Pattern Repository">The Portland Pattern Repository</a></li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div aria-labelledby="Software_engineering" class="navbox" role="navigation" style="padding:3px">
<table class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
<tr>
<th class="navbox-title" colspan="2" scope="col">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="/wiki/Template:Software_engineering" title="Template:Software engineering"><abbr style=";;background:none transparent;border:none;" title="View this template">v</abbr></a></li>
<li class="nv-talk"><a href="/wiki/Template_talk:Software_engineering" title="Template talk:Software engineering"><abbr style=";;background:none transparent;border:none;" title="Discuss this template">t</abbr></a></li>
<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Software_engineering&amp;action=edit"><abbr style=";;background:none transparent;border:none;" title="Edit this template">e</abbr></a></li>
</ul>
</div>
<div id="Software_engineering" style="font-size:114%"><a href="/wiki/Software_engineering" title="Software engineering">Software engineering</a></div>
</th>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">Fields</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Computer_programming" title="Computer programming">Computer programming</a></li>
<li><a href="/wiki/Requirements_engineering" title="Requirements engineering">Requirements engineering</a></li>
<li><a href="/wiki/Software_deployment" title="Software deployment">Software deployment</a></li>
<li><a href="/wiki/Software_design" title="Software design">Software design</a></li>
<li><a href="/wiki/Software_maintenance" title="Software maintenance">Software maintenance</a></li>
<li><a href="/wiki/Software_testing" title="Software testing">Software testing</a></li>
<li><a href="/wiki/Systems_analysis" title="Systems analysis">Systems analysis</a></li>
<li><a href="/wiki/Formal_methods" title="Formal methods">Formal methods</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">Concepts</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Data_modeling" title="Data modeling">Data modeling</a></li>
<li><a href="/wiki/Enterprise_architecture" title="Enterprise architecture">Enterprise architecture</a></li>
<li><a href="/wiki/Functional_specification" title="Functional specification">Functional specification</a></li>
<li><a href="/wiki/Modeling_language" title="Modeling language">Modeling language</a></li>
<li><a href="/wiki/Orthogonality_(programming)" title="Orthogonality (programming)">Orthogonality</a></li>
<li><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigm</a></li>
<li><a href="/wiki/Software" title="Software">Software</a></li>
<li><a href="/wiki/Software_archaeology" title="Software archaeology">Software archaeology</a></li>
<li><a href="/wiki/Software_architecture" title="Software architecture">Software architecture</a></li>
<li><a href="/wiki/Software_configuration_management" title="Software configuration management">Software configuration management</a></li>
<li><a class="mw-redirect" href="/wiki/Software_development_methodology" title="Software development methodology">Software development methodology</a></li>
<li><a href="/wiki/Software_development_process" title="Software development process">Software development process</a></li>
<li><a href="/wiki/Software_quality" title="Software quality">Software quality</a></li>
<li><a href="/wiki/Software_quality_assurance" title="Software quality assurance">Software quality assurance</a></li>
<li><a href="/wiki/Software_verification_and_validation" title="Software verification and validation">Software verification and validation</a></li>
<li><a href="/wiki/Structured_analysis" title="Structured analysis">Structured analysis</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">Orientations</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Agile_software_development" title="Agile software development">Agile</a></li>
<li><a href="/wiki/Aspect-oriented_software_development" title="Aspect-oriented software development">Aspect-oriented</a></li>
<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object orientation</a></li>
<li><a href="/wiki/Ontology_(information_science)" title="Ontology (information science)">Ontology</a></li>
<li><a href="/wiki/Service-oriented_architecture" title="Service-oriented architecture">Service orientation</a></li>
<li><a href="/wiki/Systems_development_life_cycle" title="Systems development life cycle">SDLC</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">Models</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em"></div>
<table class="nowraplinks navbox-subgroup" style="border-spacing:0">
<tr>
<th class="navbox-group" scope="row" style="padding-left:0;padding-right:0;font-weight:normal;">
<div style="padding:0em 0.75em;">Developmental</div>
</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Agile_software_development" title="Agile software development">Agile</a></li>
<li><a href="/wiki/Enterprise_Unified_Process" title="Enterprise Unified Process">EUP</a></li>
<li><a href="/wiki/Executable_UML" title="Executable UML">Executable UML</a></li>
<li><a href="/wiki/Incremental_build_model" title="Incremental build model">Incremental model</a></li>
<li><a href="/wiki/Iterative_and_incremental_development" title="Iterative and incremental development">Iterative model</a></li>
<li><a href="/wiki/Software_prototyping" title="Software prototyping">Prototype model</a></li>
<li><a href="/wiki/Rapid_application_development" title="Rapid application development">RAD</a></li>
<li><a href="/wiki/Unified_Process" title="Unified Process">UP</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row" style="padding-left:0;padding-right:0;font-weight:normal;">
<div style="padding:0em 0.75em;">Other</div>
</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/ISO/IEC_15504" title="ISO/IEC 15504">SPICE</a></li>
<li><a href="/wiki/Capability_Maturity_Model_Integration" title="Capability Maturity Model Integration">CMMI</a></li>
<li><a href="/wiki/Data_model" title="Data model">Data model</a></li>
<li><a href="/wiki/Entity%E2%80%93relationship_model" title="Entity–relationship model">ER model</a></li>
<li><a href="/wiki/Function_model" title="Function model">Function model</a></li>
<li><a href="/wiki/Information_model" title="Information model">Information model</a></li>
<li><a href="/wiki/Metamodeling" title="Metamodeling">Metamodeling</a></li>
<li><a href="/wiki/Object_model" title="Object model">Object model</a></li>
<li><a href="/wiki/Systems_modeling" title="Systems modeling">Systems model</a></li>
<li><a href="/wiki/View_model" title="View model">View model</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row" style="padding-left:0;padding-right:0;font-weight:normal;">
<div style="padding:0em 0.75em;">Languages</div>
</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/IDEF" title="IDEF">IDEF</a></li>
<li><a href="/wiki/Unified_Modeling_Language" title="Unified Modeling Language">UML</a></li>
<li><a href="/wiki/Systems_Modeling_Language" title="Systems Modeling Language">SysML</a></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">
<div style="padding:0.1em 0;line-height:1.2em;">Software<br/>
engineers</div>
</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Victor_Basili" title="Victor Basili">Victor Basili</a></li>
<li><a href="/wiki/Kent_Beck" title="Kent Beck">Kent Beck</a></li>
<li><a href="/wiki/Grady_Booch" title="Grady Booch">Grady Booch</a></li>
<li><a href="/wiki/Fred_Brooks" title="Fred Brooks">Fred Brooks</a></li>
<li><a href="/wiki/Barry_Boehm" title="Barry Boehm">Barry Boehm</a></li>
<li><a href="/wiki/Ward_Cunningham" title="Ward Cunningham">Ward Cunningham</a></li>
<li><a href="/wiki/Tom_DeMarco" title="Tom DeMarco">Tom DeMarco</a></li>
<li><a href="/wiki/Edsger_W._Dijkstra" title="Edsger W. Dijkstra">Edsger W. Dijkstra</a></li>
<li><a href="/wiki/Martin_Fowler" title="Martin Fowler">Martin Fowler</a></li>
<li><a href="/wiki/Tony_Hoare" title="Tony Hoare">C. A. R. Hoare</a></li>
<li><a href="/wiki/Watts_Humphrey" title="Watts Humphrey">Watts Humphrey</a></li>
<li><a href="/wiki/Michael_A._Jackson" title="Michael A. Jackson">Michael A. Jackson</a></li>
<li><a href="/wiki/Ivar_Jacobson" title="Ivar Jacobson">Ivar Jacobson</a></li>
<li><a href="/wiki/Stephen_J._Mellor" title="Stephen J. Mellor">Stephen J. Mellor</a></li>
<li><a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a></li>
<li><a href="/wiki/David_Parnas" title="David Parnas">David Parnas</a></li>
<li><a href="/wiki/Winston_W._Royce" title="Winston W. Royce">Winston W. Royce</a></li>
<li><a href="/wiki/James_Rumbaugh" title="James Rumbaugh">James Rumbaugh</a></li>
<li><a href="/wiki/Niklaus_Wirth" title="Niklaus Wirth">Niklaus Wirth</a></li>
<li><a href="/wiki/Edward_Yourdon" title="Edward Yourdon">Edward Yourdon</a></li>
<li><a href="/wiki/Mohamed_Fayad" title="Mohamed Fayad">Mohamed Fayad</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th class="navbox-group" scope="row">Related fields</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Computer_science" title="Computer science">Computer science</a></li>
<li><a href="/wiki/Computer_engineering" title="Computer engineering">Computer engineering</a></li>
<li><a href="/wiki/Project_management" title="Project management">Project management</a></li>
<li><a href="/wiki/Risk_management" title="Risk management">Risk management</a></li>
<li><a href="/wiki/Systems_engineering" title="Systems engineering">Systems engineering</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2" style="font-weight:bold;">
<div>
<ul>
<li><img alt="Category" data-file-height="31" data-file-width="36" height="14" src="//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/24px-Folder_Hexagonal_Icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/32px-Folder_Hexagonal_Icon.svg.png 2x" title="Category" width="16"/> <a href="/wiki/Category:Software_engineering" title="Category:Software engineering">Category</a></li>
<li><img alt="Commons page" data-file-height="1376" data-file-width="1024" height="16" src="//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/12px-Commons-logo.svg.png" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/18px-Commons-logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/24px-Commons-logo.svg.png 2x" title="Commons page" width="12"/> <a class="extiw" href="https://commons.wikimedia.org/wiki/Software_engineering" title="commons:Software engineering">Commons</a></li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div aria-labelledby="Types_of_programming_languages" class="navbox" role="navigation" style="padding:3px">
<table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
<tr>
<th class="navbox-title" colspan="2" scope="col">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="/wiki/Template:Types_of_programming_languages" title="Template:Types of programming languages"><abbr style=";;background:none transparent;border:none;" title="View this template">v</abbr></a></li>
<li class="nv-talk"><a href="/wiki/Template_talk:Types_of_programming_languages" title="Template talk:Types of programming languages"><abbr style=";;background:none transparent;border:none;" title="Discuss this template">t</abbr></a></li>
<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Types_of_programming_languages&amp;action=edit"><abbr style=";;background:none transparent;border:none;" title="Edit this template">e</abbr></a></li>
</ul>
</div>
<div id="Types_of_programming_languages" style="font-size:114%"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Types of programming languages</a></div>
</th>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-list navbox-odd hlist" colspan="2" style="width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Actor_model" title="Actor model">Actor-based</a></li>
<li><a href="/wiki/Array_programming" title="Array programming">Array</a></li>
<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent</a></li>
<li><a href="/wiki/Data-structured_language" title="Data-structured language">Data-structured</a></li>
<li><a href="/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a></li>
<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a></li>
<li><a href="/wiki/Domain-specific_language" title="Domain-specific language">Domain-specific</a></li>
<li><a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a></li>
<li><a href="/wiki/Esoteric_programming_language" title="Esoteric programming language">Esoteric</a></li>
<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="/wiki/Extensible_programming" title="Extensible programming">Extensible</a></li>
<li><a href="/wiki/Functional_programming" title="Functional programming">Functional</a></li>
<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a></li>
<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a></li>
<li><a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a></li>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>+*<a class="mw-redirect" href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">Multi-paradigm</a></li>
<li><a href="/wiki/Object-based_language" title="Object-based language">Object-based</a></li>
<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a></li>
<li><a class="mw-redirect" href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a></li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a></li>
<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
<li><a href="/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">Reflective</a></li>
<li><a href="/wiki/Rule-based_system" title="Rule-based system">Rule-based</a></li>
<li><a href="/wiki/Scripting_language" title="Scripting language">Scripting</a></li>
<li><a href="/wiki/Synchronous_programming_language" title="Synchronous programming language">Synchronous</a></li>
<li><a class="mw-redirect" href="/wiki/Templating_language" title="Templating language">Templating</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-list navbox-even hlist" colspan="2" style="width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Assembly_language" title="Assembly language">Assembly</a></li>
<li><a href="/wiki/Compiled_language" title="Compiled language">Compiled</a></li>
<li><a href="/wiki/Interpreted_language" title="Interpreted language">Interpreted</a></li>
<li><a href="/wiki/Machine_code" title="Machine code">Machine</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-list navbox-odd hlist" colspan="2" style="width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Low-level_programming_language" title="Low-level programming language">Low-level</a></li>
<li><a href="/wiki/High-level_programming_language" title="High-level programming language">High-level</a></li>
<li><a href="/wiki/Very_high-level_programming_language" title="Very high-level programming language">Very high-level</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-list navbox-even hlist" colspan="2" style="width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/First-generation_programming_language" title="First-generation programming language">First generation</a></li>
<li><a href="/wiki/Second-generation_programming_language" title="Second-generation programming language">Second generation</a></li>
<li><a href="/wiki/Third-generation_programming_language" title="Third-generation programming language">Third generation</a></li>
<li><a href="/wiki/Fourth-generation_programming_language" title="Fourth-generation programming language">Fourth generation</a></li>
<li><a href="/wiki/Fifth-generation_programming_language" title="Fifth-generation programming language">Fifth generation</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-list navbox-odd hlist" colspan="2" style="width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Non-English-based_programming_languages" title="Non-English-based programming languages">Non-English-based</a></li>
<li><a href="/wiki/Visual_programming_language" title="Visual programming language">Visual</a></li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<!-- Saved in parser cache with key enwiki:pcache:idhash:37160229-0!*!0!!en!4!* and timestamp 20160926083826 and revision id 738351724
 -->
<noscript><img alt="" height="1" src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" style="border: none; position: absolute;" title="" width="1"/></noscript></div> <div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Join-pattern&amp;oldid=738351724">https://en.wikipedia.org/w/index.php?title=Join-pattern&amp;oldid=738351724</a>"					</div>
<div class="catlinks" data-mw="interface" id="catlinks"><div class="mw-normal-catlinks" id="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></li><li><a href="/wiki/Category:Distributed_computing" title="Category:Distributed computing">Distributed computing</a></li></ul></div><div class="mw-hidden-catlinks mw-hidden-cats-hidden" id="mw-hidden-catlinks">Hidden categories: <ul><li><a href="/wiki/Category:CS1_errors:_dates" title="Category:CS1 errors: dates">CS1 errors: dates</a></li><li><a href="/wiki/Category:CS1_errors:_chapter_ignored" title="Category:CS1 errors: chapter ignored">CS1 errors: chapter ignored</a></li><li><a href="/wiki/Category:Wikipedia_articles_that_are_too_technical_from_January_2013" title="Category:Wikipedia articles that are too technical from January 2013">Wikipedia articles that are too technical from January 2013</a></li><li><a href="/wiki/Category:All_articles_that_are_too_technical" title="Category:All articles that are too technical">All articles that are too technical</a></li><li><a href="/wiki/Category:Articles_needing_expert_attention_from_January_2013" title="Category:Articles needing expert attention from January 2013">Articles needing expert attention from January 2013</a></li><li><a href="/wiki/Category:All_articles_needing_expert_attention" title="Category:All articles needing expert attention">All articles needing expert attention</a></li><li><a href="/wiki/Category:Articles_which_use_infobox_templates_with_no_data_rows" title="Category:Articles which use infobox templates with no data rows">Articles which use infobox templates with no data rows</a></li></ul></div></div> <div class="visualClear"></div>
</div>
</div>
<div id="mw-navigation">
<h2>Navigation menu</h2>
<div id="mw-head">
<div aria-labelledby="p-personal-label" class="" id="p-personal" role="navigation">
<h3 id="p-personal-label">Personal tools</h3>
<ul>
<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a accesskey="n" href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]">Talk</a></li><li id="pt-anoncontribs"><a accesskey="y" href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Join-pattern" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a accesskey="o" href="/w/index.php?title=Special:UserLogin&amp;returnto=Join-pattern" title="You're encouraged to log in; however, it's not mandatory. [o]">Log in</a></li> </ul>
</div>
<div id="left-navigation">
<div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
<h3 id="p-namespaces-label">Namespaces</h3>
<ul>
<li class="selected" id="ca-nstab-main"><span><a accesskey="c" href="/wiki/Join-pattern" title="View the content page [c]">Article</a></span></li>
<li id="ca-talk"><span><a accesskey="t" href="/wiki/Talk:Join-pattern" rel="discussion" title="Discussion about the content page [t]">Talk</a></span></li>
</ul>
</div>
<div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
<h3 id="p-variants-label">
<span>Variants</span><a href="#"></a>
</h3>
<div class="menu">
<ul>
</ul>
</div>
</div>
</div>
<div id="right-navigation">
<div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
<h3 id="p-views-label">Views</h3>
<ul>
<li class="selected" id="ca-view"><span><a href="/wiki/Join-pattern">Read</a></span></li>
<li id="ca-edit"><span><a accesskey="e" href="/w/index.php?title=Join-pattern&amp;action=edit" title="Edit this page [e]">Edit</a></span></li>
<li class="collapsible" id="ca-history"><span><a accesskey="h" href="/w/index.php?title=Join-pattern&amp;action=history" title="Past revisions of this page [h]">View history</a></span></li>
</ul>
</div>
<div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
<h3 id="p-cactions-label"><span>More</span><a href="#"></a></h3>
<div class="menu">
<ul>
</ul>
</div>
</div>
<div id="p-search" role="search">
<h3>
<label for="searchInput">Search</label>
</h3>
<form action="/w/index.php" id="searchform">
<div id="simpleSearch">
<input accesskey="f" id="searchInput" name="search" placeholder="Search" title="Search Wikipedia [f]" type="search"/><input name="title" type="hidden" value="Special:Search"/><input class="searchButton mw-fallbackSearchButton" id="mw-searchButton" name="fulltext" title="Search Wikipedia for this text" type="submit" value="Search"/><input class="searchButton" id="searchButton" name="go" title="Go to a page with this exact name if it exists" type="submit" value="Go"/> </div>
</form>
</div>
</div>
</div>
<div id="mw-panel">
<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page" title="Visit the main page"></a></div>
<div aria-labelledby="p-navigation-label" class="portal" id="p-navigation" role="navigation">
<h3 id="p-navigation-label">Navigation</h3>
<div class="body">
<ul>
<li id="n-mainpage-description"><a accesskey="z" href="/wiki/Main_Page" title="Visit the main page [z]">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a accesskey="x" href="/wiki/Special:Random" title="Load a random article [x]">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li> </ul>
</div>
</div>
<div aria-labelledby="p-interaction-label" class="portal" id="p-interaction" role="navigation">
<h3 id="p-interaction-label">Interaction</h3>
<div class="body">
<ul>
<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a accesskey="r" href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li> </ul>
</div>
</div>
<div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
<h3 id="p-tb-label">Tools</h3>
<div class="body">
<ul>
<li id="t-whatlinkshere"><a accesskey="j" href="/wiki/Special:WhatLinksHere/Join-pattern" title="List of all English Wikipedia pages containing links to this page [j]">What links here</a></li><li id="t-recentchangeslinked"><a accesskey="k" href="/wiki/Special:RecentChangesLinked/Join-pattern" title="Recent changes in pages linked from this page [k]">Related changes</a></li><li id="t-upload"><a accesskey="u" href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]">Upload file</a></li><li id="t-specialpages"><a accesskey="q" href="/wiki/Special:SpecialPages" title="A list of all special pages [q]">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Join-pattern&amp;oldid=738351724" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Join-pattern&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a accesskey="g" href="https://www.wikidata.org/wiki/Q6268981" title="Link to connected data repository item [g]">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Join-pattern&amp;id=738351724" title="Information on how to cite this page">Cite this page</a></li> </ul>
</div>
</div>
<div aria-labelledby="p-coll-print_export-label" class="portal" id="p-coll-print_export" role="navigation">
<h3 id="p-coll-print_export-label">Print/export</h3>
<div class="body">
<ul>
<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Join-pattern">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Join-pattern&amp;returnto=Join-pattern&amp;oldid=738351724&amp;writer=rdf2latex">Download as PDF</a></li><li id="t-print"><a accesskey="p" href="/w/index.php?title=Join-pattern&amp;printable=yes" title="Printable version of this page [p]">Printable version</a></li> </ul>
</div>
</div>
<div aria-labelledby="p-lang-label" class="portal" id="p-lang" role="navigation">
<h3 id="p-lang-label">Languages</h3>
<div class="body">
<ul>
<li class="uls-p-lang-dummy"><a href="#"></a></li> </ul>
<div class="after-portlet after-portlet-lang"><span class="wb-langlinks-add wb-langlinks-link"><a class="wbc-editpage" href="https://www.wikidata.org/wiki/Q6268981#sitelinks-wikipedia" title="Add interlanguage links">Add links</a></span></div> </div>
</div>
</div>
</div>
<div id="footer" role="contentinfo">
<ul id="footer-info">
<li id="footer-info-lastmod"> This page was last modified on 8 September 2016, at 12:46.</li>
<li id="footer-info-copyright">Text is available under the <a href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="license">Creative Commons Attribution-ShareAlike License</a><a href="//creativecommons.org/licenses/by-sa/3.0/" rel="license" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
</ul>
<ul id="footer-places">
<li id="footer-places-privacy"><a class="extiw" href="https://wikimediafoundation.org/wiki/Privacy_policy" title="wmf:Privacy policy">Privacy policy</a></li>
<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
<li id="footer-places-cookiestatement"><a href="https://wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>
<li id="footer-places-mobileview"><a class="noprint stopMobileRedirectToggle" href="//en.m.wikipedia.org/w/index.php?title=Join-pattern&amp;mobileaction=toggle_view_mobile">Mobile view</a></li>
</ul>
<ul class="noprint" id="footer-icons">
<li id="footer-copyrightico">
<a href="https://wikimediafoundation.org/"><img alt="Wikimedia Foundation" height="31" src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88"/></a> </li>
<li id="footer-poweredbyico">
<a href="//www.mediawiki.org/"><img alt="Powered by MediaWiki" height="31" src="/static/images/poweredby_mediawiki_88x31.png" srcset="/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x" width="88"/></a> </li>
</ul>
<div style="clear:both"></div>
</div>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.loader.load(["ext.cite.a11y","mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.gadget.featured-articles-links","mmv.bootstrap.autostart","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.centralNotice.geoIP","ext.centralNotice.startUp"]);});</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set( {
    "wgPageParseReport": {
        "limitreport": {
            "cputime": "0.966",
            "walltime": "2.371",
            "ppvisitednodes": {
                "value": 4147,
                "limit": 1000000
            },
            "ppgeneratednodes": {
                "value": 0,
                "limit": 1500000
            },
            "postexpandincludesize": {
                "value": 161545,
                "limit": 2097152
            },
            "templateargumentsize": {
                "value": 3785,
                "limit": 2097152
            },
            "expansiondepth": {
                "value": 12,
                "limit": 40
            },
            "expensivefunctioncount": {
                "value": 4,
                "limit": 500
            },
            "entityaccesscount": {
                "value": 0,
                "limit": 400
            },
            "timingprofile": [
                "100.00% 2135.558      1 -total",
                " 17.01%  363.218      1 Template:Reflist",
                " 14.75%  315.028      3 Template:Code",
                " 13.37%  285.488     43 Template:Cite_journal",
                "  4.61%   98.522     11 Template:Cite_web",
                "  3.94%   84.042      2 Template:Infobox",
                "  3.87%   82.697      5 Template:Navbox",
                "  3.51%   74.977      1 Template:Infobox_programming_language",
                "  2.62%   55.876      1 Template:Technical",
                "  2.00%   42.762      1 Template:Design_Patterns_patterns"
            ]
        },
        "scribunto": {
            "limitreport-timeusage": {
                "value": "0.470",
                "limit": "10.000"
            },
            "limitreport-memusage": {
                "value": 4656429,
                "limit": 52428800
            }
        },
        "cachereport": {
            "origin": "mw1213",
            "timestamp": "20160926083828",
            "ttl": 2592000,
            "transientcontent": false
        }
    }
} );});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":86,"wgHostname":"mw1182"});});</script>
</body>
</html>

