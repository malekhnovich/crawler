The following page is located at the url: https://sourcemaking.com/design_patterns
<!DOCTYPE html>

<html lang="en">
<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# website: http://ogp.me/ns/website#">
<meta charset="utf-8">
<title>Design Patterns</title>
<meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport">
<meta content="IE=edge" http-equiv="X-UA-Compatible">
<meta content="Design patterns. Design patterns source code examples. Design patterns tutorials and guides." name="description">
<link href="https://sourcemaking.com/design_patterns" rel="canonical"/>
<link href="/favicon.ico" rel="shortcut icon"/>
<meta content="251736824995775" property="fb:app_id"/>
<meta content="website" property="og:type"/>
<meta content="https://sourcemaking.com/files/v2/content/home-tb1.png" property="og:image"/>
<meta content="https://sourcemaking.com" property="og:url"/>
<meta content="Design Patterns and Refactoring" property="og:title"/>
<meta content="Design Patterns and Refactoring articles and guides. Design Patterns video tutorials for newbies. Simple descriptions and full source code examples in Java, C++, C#, PHP and Delphi." property="og:description"/>
<link href="/build/css/public-e0d7c4c0b9.min.css" rel="stylesheet">
</link></meta></meta></meta></meta></head>
<body class="" data-body_class="">
<div class="cart-placeholder"></div>
<main class="main-content top-content center-content " data-page_class="" role="main">
<div class="main-content-container center-content-container">
<div class="page text">
<article>
<h1 class="title">Design Patterns</h1>
<script type="text/javascript">
    // Shorten examples titles for users.
    var h1 = document.getElementsByTagName("H1")[0];
    var title = h1.innerHTML;
    title = title.replace(/^(.*) Design Pattern in (.*)$/, '<strong>$1</strong> in <em>$2</em>');
    title = title.replace(/^(.*) Design Pattern$/, '<strong>$1</strong> Design Pattern');
    h1.innerHTML = title;
</script>
<p class="ebook_ignore">In software engineering, a
  <strong>design pattern</strong> is a general repeatable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations.
</p>
<h3 class="ebook_ignore">Uses of Design Patterns</h3>
<p>Design patterns can speed up the development process by providing tested, proven development paradigms. Effective software design requires considering issues that may not become visible until later in the implementation. Reusing design patterns helps to prevent subtle issues that can cause major problems and improves code readability for coders and architects familiar with the patterns.</p>
<p>Often, people only understand how to apply certain software design techniques to certain problems. These techniques are difficult to apply to a broader range of problems. Design patterns provide general solutions, documented in a format that doesn't require specifics tied to a particular problem.</p>
<p>In addition, patterns allow developers to communicate using well-known, well understood names for software interactions. Common design patterns can be improved over time, making them more robust than ad-hoc designs.</p>
<h3><a href="/design_patterns/creational_patterns">Creational design patterns</a></h3>
<p>These design patterns are all about class instantiation. This pattern can be further divided into class-creation patterns and object-creational patterns. While class-creation patterns use inheritance effectively in the instantiation process, object-creation patterns use delegation effectively to get the job done.</p>
<div class="ebook_ignore" style="float:right; width:30%">
<a href="/design_patterns/abstract_factory"><img alt="Example of Abstract Factory" src="/files/v2/content/patterns/Abstract_Factory_example1-2x.png" style="background:#fff;"/></a>
</div>
<ul>
<li>
<a href="/design_patterns/abstract_factory" title="Provides a way to encapsulate a group of individual factories that have a common theme.">Abstract Factory</a><br/>
    Creates an instance of several families of classes
  </li>
<li>
<a href="/design_patterns/builder" title="Separate the construction of a complex object from its representation so that the same construction process can create different representations.">Builder</a><br/>
    Separates object construction from its representation
  </li>
<li>
<a href="/design_patterns/factory_method" title="Defines a separate method for creating the objects, which subclasses can then override to specify the derived type of product that will be created.">Factory Method</a><br/>
    Creates an instance of several derived classes
  </li>
<li>
<a href="/design_patterns/object_pool" title="Avoid expensive acquisition and release of resources by recycling objects that are no longer in use">Object Pool</a><br/>
    Avoid expensive acquisition and release of resources by recycling objects that are no longer in use
  </li>
<li><a href="/design_patterns/prototype" title="Being cloned to produce new objects.">Prototype</a><br/>
    A fully initialized instance to be copied or cloned
  </li>
<li><a href="/design_patterns/singleton" title="Restricts instantiation of a class to one object.">Singleton</a><br/>
    A class of which only a single instance can exist
  </li>
</ul>
<h3><a href="/design_patterns/structural_patterns">Structural design patterns</a></h3>
<p>These design patterns are all about Class and Object composition. Structural class-creation patterns use inheritance to compose interfaces. Structural object-patterns define ways to compose objects to obtain new functionality.</p>
<div class="ebook_ignore" style="float:right; width:30%;"><a href="/design_patterns/decorator"><img alt="" src="/files/v2/content/patterns/Decorator_example-2x.png" style="background:#fff;"/></a></div>
<ul>
<li>
<a href="/design_patterns/adapter" title="Adapts one interface for a class into one that a client expects.">Adapter</a><br/>
    Match interfaces of different classes
  </li>
<li>
<a href="/design_patterns/bridge" title="Decouples an abstraction from its implementation so that the two can vary independently.">Bridge</a><br/>
    Separates an objectâ€™s interface from its implementation
  </li>
<li>
<a href="/design_patterns/composite" title="Designed as a composition of one-or-more similar objects, all exhibiting similar functionality.">Composite</a><br/>
    A tree structure of simple and composite objects
  </li>
<li>
<a href="/design_patterns/decorator" title="Allows new/additional behavior to be added to an existing method of an object dynamically.">Decorator</a><br/>
    Add responsibilities to objects dynamically
  </li>
<li>
<a href="/design_patterns/facade" title="Provides a simplified interface to a larger body of code.">Facade</a><br/>
    A single class that represents an entire subsystem
  </li>
<li>
<a href="/design_patterns/flyweight" title="When many objects must be manipulated and these cannot afford to have extraneous data, flyweight is appropriate.">Flyweight</a><br/>
    A fine-grained instance used for efficient sharing
  </li>
<li>
<div class="ebook_ignore" style="display:inline-block;display:inline-block;float:right;width:30%;"><a href="/design_patterns/proxy"><img alt="" src="/files/v2/content/patterns/Proxy_example1-2x.png" style="background:#fff;"/></a></div>
<a href="/design_patterns/private_class_data" title="Restricts accessor/mutator access">Private Class Data</a><br/>
    Restricts accessor/mutator access
  </li>
<li><a href="/design_patterns/proxy" title="Class functioning as an interface to another thing.">Proxy</a><br/>
    An object representing another object
  </li>
</ul>
<h3><a href="/design_patterns/behavioral_patterns">Behavioral design patterns</a></h3>
<p>These design patterns are all about Class's objects communication. Behavioral patterns are those patterns that are most specifically concerned with communication between objects.</p>
<div class="ebook_ignore" style="float:right; width:30%;"><a href="/design_patterns/interpreter"><img alt="" src="/files/v2/content/patterns/Interpreter_example1-2x.png" style="background:#fff;"/></a></div>
<ul>
<li>
<a href="/design_patterns/chain_of_responsibility" title="Source of command objects and a series of processing objects.">Chain of responsibility</a><br/>
    A way of passing a request between a chain of objects
  </li>
<li><a href="/design_patterns/command" title="Objects are used to represent actions.">Command</a><br/>
    Encapsulate a command request as an object
  </li>
<li>
<a href="/design_patterns/interpreter" title="The basic idea is to implement a specialized computer language to rapidly solve a defined class of problems.">Interpreter</a><br/>
    A way to include language elements in a program
  </li>
<li>
<a href="/design_patterns/iterator" title="Used to access the elements of an aggregate object sequentially without exposing its underlying representation.">Iterator</a><br/>
    Sequentially access the elements of a collection
  </li>
<li>
<a href="/design_patterns/mediator" title="Provides a unified interface to a set of interfaces in a subsystem.">Mediator</a><br/>
    Defines simplified communication between classes
  </li>
<li>
<a href="/design_patterns/memento" title="Provides the ability to restore an object to its previous state.">Memento</a><br/>
    Capture and restore an object's internal state
  </li>
<li>
<a href="/design_patterns/null_object" title="Designed to act as a default value of an object.">Null Object</a><br/>
    Designed to act as a default value of an object
  </li>
<li><a href="/design_patterns/observer" title="Observes the state of an object in a program.">Observer</a><br/>
    A way of notifying change to a number of classes
  </li>
<li>
<div class="ebook_ignore" style="display:inline-block;float:right;width:30%;"><a href="/design_patterns/state"><img alt="" src="/files/v2/content/patterns/State_example1-2x.png" style="background:#fff;"/></a></div>
<a href="/design_patterns/state" title="Represent the state of an object.">State</a><br/>
    Alter an object's behavior when its state changes
  </li>
<li><a href="/design_patterns/strategy" title="Algorithms can be selected on-the-fly at runtime.">Strategy</a><br/>
    Encapsulates an algorithm inside a class
  </li>
<li>
<a href="/design_patterns/template_method" title="A template method defines the skeleton of an algorithm.">Template method</a><br/>
    Defer the exact steps of an algorithm to a subclass
  </li>
<li>
<a href="/design_patterns/visitor" title="A way of separating an algorithm from an object structure.">Visitor</a><br/>
    Defines a new operation to a class without change
  </li>
</ul>
<h3 class="ebook_ignore">Criticism</h3>
<div class="ebook_ignore">
<p>The concept of design patterns has been criticized by some in the field of computer science.</p>
<h4>Targets the wrong problem</h4>
<p>The need for patterns results from using computer languages or techniques with insufficient abstraction ability. Under ideal factoring, a concept should not be copied, but merely referenced. But if something is referenced instead of copied, then there is no "pattern" to label and catalog. Paul Graham writes in the essay
    <a href="http://www.paulgraham.com/icad.html">Revenge of the Nerds</a>.</p>
<p>Peter Norvig provides a similar argument. He demonstrates that 16 out of the 23 patterns in the Design Patterns book (which is primarily focused on C++) are simplified or eliminated (via direct language support) in Lisp or Dylan.</p>
<h4>Lacks formal foundations</h4>
<p>The study of design patterns has been excessively ad hoc, and some have argued that the concept sorely needs to be put on a more formal footing. At
    <abbr>OOPSLA 1999</abbr>, the Gang of Four were (with their full cooperation) subjected to a show trial, in which they were "charged" with numerous crimes against computer science. They were "convicted" by â…” of the "jurors" who attended the trial.
  </p>
<h4>Leads to inefficient solutions</h4>
<p>The idea of a design pattern is an attempt to standardize what are already accepted best practices. In principle this might appear to be beneficial, but in practice it often results in the unnecessary duplication of code. It is almost always a more efficient solution to use a well-factored implementation rather than a "just barely good enough" design pattern.</p>
<h4>Does not differ significantly from other abstractions</h4>
<p>Some authors allege that design patterns don't differ significantly from other forms of abstraction, and that the use of new terminology (borrowed from the architecture community) to describe existing phenomena in the field of programming is unnecessary. The Model-View-Controller paradigm is touted as an example of a "pattern" which predates the concept of "design patterns" by several years. It is further argued by some that the primary contribution of the Design Patterns community (and the Gang of Four book) was the use of Alexander's pattern language as a form of documentation; a practice which is often ignored in the literature.</p>
</div>
<div class="banner prom" data-creative-id="standard" data-id="DP: Part of the ebook 3d" data-position="content_bottom">
<div class="line-guide"><div class="line-guide-helper"></div></div>
<div class="image">
<div class="image3d-right">
<a href="/design-patterns-ebook"><img alt="AntiPatterns: The Survival Guide" src="/files/v2/landings/DesignPatterns-cover.png"/></a>
</div>
</div>
<div class="caption">
<h3>Read next</h3>
<p>This article is taken from our book <b><a href="/design-patterns-ebook">Design Patterns Explained Simply</a></b>.</p>
<p>All of the design patterns are compiled there. The book is written in clear, simple language that makes it easy to read and understand (just like this article).</p>
<p>We distribute it in PDF &amp; EPUB formats so you can get it onto your iPad, Kindle, or other portable device immediately after your purchase.</p>
<div class="p">
<a class="btn btn-hg btn-featured" href="/design-patterns-ebook"><i class="fa fa-heart"></i> Learn more</a>
</div>
</div>
</div>
</article>
<nav class="prev-next">
<div class="next">
<h4>Read next</h4>
<a class="btn" href="/design_patterns/creational_patterns" rel="next">Creational patterns <span class="fa fa-arrow-right"></span></a>
</div>
</nav>
</div>
<aside class="feature content-secondary">
<div class="book-button">
<div class="prom text" data-creative-id="Blue button" data-id="DP: Nav button with image3d" data-position="sidebar_bottom">
<div class="image m-b-1">
<div class="image3d-right">
<a href="/design-patterns-ebook"><img alt="Design Patterns eBook" class="" src="/files/v2/landings/DesignPatterns-cover.png"/></a>
</div>
</div>
<div style="text-align: center">
<a class="btn btn-landing-dp btn-hg btn-block btn-featured" href="/design-patterns-ebook"><i class="fa fa-book"></i> Design Patterns Book</a>
</div>
<p class="m-t-1">Hey, check out our <a href="/design-patterns-ebook">ebook on design patterns</a>. It has all of the patterns available on SourceMaking.</p>
<p>Oh, and it is on sale <b>right now.</b></p>
</div>
</div></aside>
</div>
</main>
<nav class="navigation" role="navigation">
<div class="navigation-container">
<a class="navigation-toggle" href="#"><i class="fa fa-bars"></i></a>
<a class="navigation-brand" href="/">
<img alt="SourceMaking" src="https://sourcemaking.com/images/content-public/logos/logo-min.png">
</img></a>
<div class="social-likes" data-url="http://sourcemaking.com/">
<div class="twitter" title="Share on Twitter">Twitter</div>
<div class="facebook" title="Share on Facebook">Facebook</div>
<div class="plusone" title="Share on Google+">Google+</div>
</div>
<ul class="navigation-menu">
<li>
<a class="userecho-private" href="https://sourcemaking.userecho.com/?show_feedback_form_private=true" rel="nofollow" title="Contact us">
<i class="fa fa-envelope"></i> <span class="caption hidden-lg-down">Contact us</span>
</a>
</li>
<li>
<a href="/home" title="Log in"><i class="fa fa-user"></i> <span class="caption hidden-lg-down">Log in</span></a>
</li>
</ul>
</div>
</nav>
<aside class="sidebar main-menu nano">
<a class="navigation-toggle" href="#"><i class="fa fa-fw fa-times"></i></a>
<div class="nano-content">
<a class="menu-brand" href="/">
<img alt="SourceMaking" src="https://sourcemaking.com/images/content-public/logos/logo.png">
</img></a>
<ul class="menu-list">
<li class="featured">
<a href="/store">
<i aria-hidden="true" class="fa fa-fw fa-star"></i> Premium Stuff
    </a>
</li> <li class=" trail active">
<a href="/design_patterns">
<i aria-hidden="true" class="fa fa-fw fa-puzzle-piece"></i> Design Patterns
    </a>
<ul class="">
<li class="">
<a href="/design_patterns/creational_patterns">
        Creational patterns
    </a>
<ul class="">
<li class="">
<a href="/design_patterns/abstract_factory">
        Abstract Factory Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/builder">
        Builder Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/factory_method">
        Factory Method Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/object_pool">
        Object Pool Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/prototype">
        Prototype Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/singleton">
        Singleton Design Pattern
    </a>
</li> </ul>
</li> <li class="">
<a href="/design_patterns/structural_patterns">
        Structural patterns
    </a>
<ul class="">
<li class="">
<a href="/design_patterns/adapter">
        Adapter Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/bridge">
        Bridge Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/composite">
        Composite Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/decorator">
        Decorator Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/facade">
        Facade Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/flyweight">
        Flyweight Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/private_class_data">
        Private Class Data
    </a>
</li> <li class="">
<a href="/design_patterns/proxy">
        Proxy Design Pattern
    </a>
</li> </ul>
</li> <li class="">
<a href="/design_patterns/behavioral_patterns">
        Behavioral patterns
    </a>
<ul class="">
<li class="">
<a href="/design_patterns/chain_of_responsibility">
        Chain of Responsibility
    </a>
</li> <li class="">
<a href="/design_patterns/command">
        Command Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/interpreter">
        Interpreter Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/iterator">
        Iterator Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/mediator">
        Mediator Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/memento">
        Memento Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/null_object">
        Null Object Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/observer">
        Observer Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/state">
        State Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/strategy">
        Strategy Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/template_method">
        Template Method Design Pattern
    </a>
</li> <li class="">
<a href="/design_patterns/visitor">
        Visitor Design Pattern
    </a>
</li> </ul>
</li> </ul>
</li> <li class="">
<a href="/antipatterns">
<i aria-hidden="true" class="fa fa-fw fa-bug"></i> AntiPatterns
    </a>
<ul class="">
<li class="">
<a href="/antipatterns/software-development-antipatterns">
        Software Development AntiPatterns
    </a>
<ul class="">
<li class="">
<a href="/antipatterns/the-blob">
        The Blob
    </a>
</li> <li class="">
<a href="/antipatterns/continuous-obsolescence">
        Continuous Obsolescence
    </a>
</li> <li class="">
<a href="/antipatterns/lava-flow">
        Lava Flow
    </a>
</li> <li class="">
<a href="/antipatterns/ambiguous-viewpoint">
        Ambiguous Viewpoint
    </a>
</li> <li class="">
<a href="/antipatterns/functional-decomposition">
        Functional Decomposition
    </a>
</li> <li class="">
<a href="/antipatterns/poltergeists">
        Poltergeists
    </a>
</li> <li class="">
<a href="/antipatterns/boat-anchor">
        Boat Anchor
    </a>
</li> <li class="">
<a href="/antipatterns/golden-hammer">
        Golden Hammer
    </a>
</li> <li class="">
<a href="/antipatterns/dead-end">
        Dead End
    </a>
</li> <li class="">
<a href="/antipatterns/spaghetti-code">
        Spaghetti Code
    </a>
</li> <li class="">
<a href="/antipatterns/input-kludge">
        Input Kludge
    </a>
</li> <li class="">
<a href="/antipatterns/walking-through-minefield">
        Walking through a Minefield
    </a>
</li> <li class="">
<a href="/antipatterns/cut-and-paste-programming">
        Cut-And-Paste Programming
    </a>
</li> <li class="">
<a href="/antipatterns/mushroom-management">
        Mushroom Management
    </a>
</li> </ul>
</li> <li class="">
<a href="/antipatterns/software-architecture-antipatterns">
        Software Architecture AntiPatterns
    </a>
<ul class="">
<li class="">
<a href="/antipatterns/autogenerated-stovepipe">
        Autogenerated Stovepipe
    </a>
</li> <li class="">
<a href="/antipatterns/stovepipe-enterprise">
        Stovepipe Enterprise
    </a>
</li> <li class="">
<a href="/antipatterns/jumble">
        Jumble
    </a>
</li> <li class="">
<a href="/antipatterns/stovepipe-system">
        Stovepipe System
    </a>
</li> <li class="">
<a href="/antipatterns/cover-your-assets">
        Cover Your Assets
    </a>
</li> <li class="">
<a href="/antipatterns/vendor-lock-in">
        Vendor Lock-In
    </a>
</li> <li class="">
<a href="/antipatterns/wolf-ticket">
        Wolf Ticket
    </a>
</li> <li class="">
<a href="/antipatterns/architecture-by-implication">
        Architecture By Implication
    </a>
</li> <li class="">
<a href="/antipatterns/warm-bodies">
        Warm Bodies
    </a>
</li> <li class="">
<a href="/antipatterns/design-by-committee">
        Design By Committee
    </a>
</li> <li class="">
<a href="/antipatterns/swiss-army-knife">
        Swiss Army Knife
    </a>
</li> <li class="">
<a href="/antipatterns/reinvent-the-wheel">
        Reinvent The Wheel
    </a>
</li> <li class="">
<a href="/antipatterns/the-grand-old-duke-of-york">
        The Grand Old Duke of York
    </a>
</li> </ul>
</li> <li class="">
<a href="/antipatterns/software-project-management-antipatterns">
        Project Management AntiPatterns
    </a>
<ul class="">
<li class="">
<a href="/antipatterns/blowhard-jamboree">
        Blowhard Jamboree
    </a>
</li> <li class="">
<a href="/antipatterns/analysis-paralysis">
        Analysis Paralysis
    </a>
</li> <li class="">
<a href="/antipatterns/viewgraph-engineering">
        Viewgraph Engineering
    </a>
</li> <li class="">
<a href="/antipatterns/death-by-planning">
        Death By Planning
    </a>
</li> <li class="">
<a href="/antipatterns/fear-of-success">
        Fear of Success
    </a>
</li> <li class="">
<a href="/antipatterns/corncob">
        Corncob
    </a>
</li> <li class="">
<a href="/antipatterns/intellectual-violence">
        Intellectual Violence
    </a>
</li> <li class="">
<a href="/antipatterns/irrational-management">
        Irrational Management
    </a>
</li> <li class="">
<a href="/antipatterns/smoke-and-mirrors">
        Smoke and Mirrors
    </a>
</li> <li class="">
<a href="/antipatterns/project-mismanagement">
        Project Mismanagement
    </a>
</li> <li class="">
<a href="/antipatterns/throw-it-over-the-wall">
        Throw It over the Wall
    </a>
</li> <li class="">
<a href="/antipatterns/fire-drill">
        Fire Drill
    </a>
</li> <li class="">
<a href="/antipatterns/the-feud">
        The Feud
    </a>
</li> <li class="">
<a href="/antipatterns/e-mail-is-dangerous">
        E-mail Is Dangerous
    </a>
</li> </ul>
</li> </ul>
</li> <li class="">
<a href="/refactoring">
<i aria-hidden="true" class="fa fa-fw fa-scissors"></i> Refactoring
    </a>
<ul class="">
<li class="">
<a href="/refactoring/smells">
        Code Smells
    </a>
<ul class="">
<li class="">
<a href="/refactoring/smells/bloaters">
        Bloaters
    </a>
<ul class="">
<li class="">
<a href="/refactoring/smells/long-method">
        Long Method
    </a>
</li> <li class="">
<a href="/refactoring/smells/large-class">
        Large Class
    </a>
</li> <li class="">
<a href="/refactoring/smells/primitive-obsession">
        Primitive Obsession
    </a>
</li> <li class="">
<a href="/refactoring/smells/long-parameter-list">
        Long Parameter List
    </a>
</li> <li class="">
<a href="/refactoring/smells/data-clumps">
        Data Clumps
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/smells/oo-abusers">
        Object-Orientation Abusers
    </a>
<ul class="">
<li class="">
<a href="/refactoring/smells/switch-statements">
        Switch Statements
    </a>
</li> <li class="">
<a href="/refactoring/smells/temporary-field">
        Temporary Field
    </a>
</li> <li class="">
<a href="/refactoring/smells/refused-bequest">
        Refused Bequest
    </a>
</li> <li class="">
<a href="/refactoring/smells/alternative-classes-with-different-interfaces">
        Alternative Classes with Different Interfaces
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/smells/change-preventers">
        Change Preventers
    </a>
<ul class="">
<li class="">
<a href="/refactoring/smells/divergent-change">
        Divergent Change
    </a>
</li> <li class="">
<a href="/refactoring/smells/shotgun-surgery">
        Shotgun Surgery
    </a>
</li> <li class="">
<a href="/refactoring/smells/parallel-inheritance-hierarchies">
        Parallel Inheritance Hierarchies
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/smells/dispensables">
        Dispensables
    </a>
<ul class="">
<li class="">
<a href="/refactoring/smells/comments">
        Comments
    </a>
</li> <li class="">
<a href="/refactoring/smells/duplicate-code">
        Duplicate Code
    </a>
</li> <li class="">
<a href="/refactoring/smells/lazy-class">
        Lazy Class
    </a>
</li> <li class="">
<a href="/refactoring/smells/data-class">
        Data Class
    </a>
</li> <li class="">
<a href="/refactoring/smells/dead-code">
        Dead Code
    </a>
</li> <li class="">
<a href="/refactoring/smells/speculative-generality">
        Speculative Generality
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/smells/couplers">
        Couplers
    </a>
<ul class="">
<li class="">
<a href="/refactoring/smells/feature-envy">
        Feature Envy
    </a>
</li> <li class="">
<a href="/refactoring/smells/inappropriate-intimacy">
        Inappropriate Intimacy
    </a>
</li> <li class="">
<a href="/refactoring/smells/message-chains">
        Message Chains
    </a>
</li> <li class="">
<a href="/refactoring/smells/middle-man">
        Middle Man
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/smells/other">
        Other Smells
    </a>
<ul class="">
<li class="">
<a href="/refactoring/smells/incomplete-library-class">
        Incomplete Library Class
    </a>
</li> </ul>
</li> </ul>
</li> <li class="">
<a href="/refactoring/refactorings">
        Refactoring techniques
    </a>
<ul class="">
<li class="">
<a href="/refactoring/composing-methods">
        Composing Methods
    </a>
<ul class="">
<li class="">
<a href="/refactoring/extract-method">
        Extract Method
    </a>
</li> <li class="">
<a href="/refactoring/inline-method">
        Inline Method
    </a>
</li> <li class="">
<a href="/refactoring/extract-variable">
        Extract Variable
    </a>
</li> <li class="">
<a href="/refactoring/inline-temp">
        Inline Temp
    </a>
</li> <li class="">
<a href="/refactoring/replace-temp-with-query">
        Replace Temp with Query
    </a>
</li> <li class="">
<a href="/refactoring/split-temporary-variable">
        Split Temporary Variable
    </a>
</li> <li class="">
<a href="/refactoring/remove-assignments-to-parameters">
        Remove Assignments to Parameters
    </a>
</li> <li class="">
<a href="/refactoring/replace-method-with-method-object">
        Replace Method with Method Object
    </a>
</li> <li class="">
<a href="/refactoring/substitute-algorithm">
        Substitute Algorithm
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/moving-features-between-objects">
        Moving Features between Objects
    </a>
<ul class="">
<li class="">
<a href="/refactoring/move-method">
        Move Method
    </a>
</li> <li class="">
<a href="/refactoring/move-field">
        Move Field
    </a>
</li> <li class="">
<a href="/refactoring/extract-class">
        Extract Class
    </a>
</li> <li class="">
<a href="/refactoring/inline-class">
        Inline Class
    </a>
</li> <li class="">
<a href="/refactoring/hide-delegate">
        Hide Delegate
    </a>
</li> <li class="">
<a href="/refactoring/remove-middle-man">
        Remove Middle Man
    </a>
</li> <li class="">
<a href="/refactoring/introduce-foreign-method">
        Introduce Foreign Method
    </a>
</li> <li class="">
<a href="/refactoring/introduce-local-extension">
        Introduce Local Extension
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/organizing-data">
        Organizing Data
    </a>
<ul class="">
<li class="">
<a href="/refactoring/self-encapsulate-field">
        Self Encapsulate Field
    </a>
</li> <li class="">
<a href="/refactoring/replace-data-value-with-object">
        Replace Data Value with Object
    </a>
</li> <li class="">
<a href="/refactoring/change-value-to-reference">
        Change Value to Reference
    </a>
</li> <li class="">
<a href="/refactoring/change-reference-to-value">
        Change Reference to Value
    </a>
</li> <li class="">
<a href="/refactoring/replace-array-with-object">
        Replace Array with Object
    </a>
</li> <li class="">
<a href="/refactoring/duplicate-observed-data">
        Duplicate Observed Data
    </a>
</li> <li class="">
<a href="/refactoring/change-unidirectional-association-to-bidirectional">
        Change Unidirectional Association to Bidirectional
    </a>
</li> <li class="">
<a href="/refactoring/change-bidirectional-association-to-unidirectional">
        Change Bidirectional Association to Unidirectional
    </a>
</li> <li class="">
<a href="/refactoring/replace-magic-number-with-symbolic-constant">
        Replace Magic Number with Symbolic Constant
    </a>
</li> <li class="">
<a href="/refactoring/encapsulate-field">
        Encapsulate Field
    </a>
</li> <li class="">
<a href="/refactoring/encapsulate-collection">
        Encapsulate Collection
    </a>
</li> <li class="">
<a href="/refactoring/replace-type-code-with-class">
        Replace Type Code with Class
    </a>
</li> <li class="">
<a href="/refactoring/replace-type-code-with-subclasses">
        Replace Type Code with Subclasses
    </a>
</li> <li class="">
<a href="/refactoring/replace-type-code-with-state-strategy">
        Replace Type Code with State/Strategy
    </a>
</li> <li class="">
<a href="/refactoring/replace-subclass-with-fields">
        Replace Subclass with Fields
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/simplifying-conditional-expressions">
        Simplifying Conditional Expressions
    </a>
<ul class="">
<li class="">
<a href="/refactoring/decompose-conditional">
        Decompose Conditional
    </a>
</li> <li class="">
<a href="/refactoring/consolidate-conditional-expression">
        Consolidate Conditional Expression
    </a>
</li> <li class="">
<a href="/refactoring/consolidate-duplicate-conditional-fragments">
        Consolidate Duplicate Conditional Fragments
    </a>
</li> <li class="">
<a href="/refactoring/remove-control-flag">
        Remove Control Flag
    </a>
</li> <li class="">
<a href="/refactoring/replace-nested-conditional-with-guard-clauses">
        Replace Nested Conditional with Guard Clauses
    </a>
</li> <li class="">
<a href="/refactoring/replace-conditional-with-polymorphism">
        Replace Conditional with Polymorphism
    </a>
</li> <li class="">
<a href="/refactoring/introduce-null-object">
        Introduce Null Object
    </a>
</li> <li class="">
<a href="/refactoring/introduce-assertion">
        Introduce Assertion
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/simplifying-method-calls">
        Simplifying Method Calls
    </a>
<ul class="">
<li class="">
<a href="/refactoring/rename-method">
        Rename Method
    </a>
</li> <li class="">
<a href="/refactoring/add-parameter">
        Add Parameter
    </a>
</li> <li class="">
<a href="/refactoring/remove-parameter">
        Remove Parameter
    </a>
</li> <li class="">
<a href="/refactoring/separate-query-from-modifier">
        Separate Query from Modifier
    </a>
</li> <li class="">
<a href="/refactoring/parameterize-method">
        Parameterize Method
    </a>
</li> <li class="">
<a href="/refactoring/replace-parameter-with-explicit-methods">
        Replace Parameter with Explicit Methods
    </a>
</li> <li class="">
<a href="/refactoring/preserve-whole-object">
        Preserve Whole Object
    </a>
</li> <li class="">
<a href="/refactoring/replace-parameter-with-method-call">
        Replace Parameter with Method Call
    </a>
</li> <li class="">
<a href="/refactoring/introduce-parameter-object">
        Introduce Parameter Object
    </a>
</li> <li class="">
<a href="/refactoring/remove-setting-method">
        Remove Setting Method
    </a>
</li> <li class="">
<a href="/refactoring/hide-method">
        Hide Method
    </a>
</li> <li class="">
<a href="/refactoring/replace-constructor-with-factory-method">
        Replace Constructor with Factory Method
    </a>
</li> <li class="">
<a href="/refactoring/replace-error-code-with-exception">
        Replace Error Code with Exception
    </a>
</li> <li class="">
<a href="/refactoring/replace-exception-with-test">
        Replace Exception with Test
    </a>
</li> </ul>
</li> <li class="">
<a href="/refactoring/dealing-with-generalisation">
        Dealing with Generalisation
    </a>
<ul class="">
<li class="">
<a href="/refactoring/pull-up-field">
        Pull Up Field
    </a>
</li> <li class="">
<a href="/refactoring/pull-up-method">
        Pull Up Method
    </a>
</li> <li class="">
<a href="/refactoring/pull-up-constructor-body">
        Pull Up Constructor Body
    </a>
</li> <li class="">
<a href="/refactoring/push-down-method">
        Push Down Method
    </a>
</li> <li class="">
<a href="/refactoring/push-down-field">
        Push Down Field
    </a>
</li> <li class="">
<a href="/refactoring/extract-subclass">
        Extract Subclass
    </a>
</li> <li class="">
<a href="/refactoring/extract-superclass">
        Extract Superclass
    </a>
</li> <li class="">
<a href="/refactoring/extract-interface">
        Extract Interface
    </a>
</li> <li class="">
<a href="/refactoring/collapse-hierarchy">
        Collapse Hierarchy
    </a>
</li> <li class="">
<a href="/refactoring/form-template-method">
        Form Template Method
    </a>
</li> <li class="">
<a href="/refactoring/replace-inheritance-with-delegation">
        Replace Inheritance with Delegation
    </a>
</li> <li class="">
<a href="/refactoring/replace-delegation-with-inheritance">
        Replace Delegation with Inheritance
    </a>
</li> </ul>
</li> </ul>
</li> </ul>
</li> <li class="">
<a href="/uml">
<i aria-hidden="true" class="fa fa-fw fa-sitemap"></i> UML
    </a>
<ul class="">
<li class="">
<a href="/uml/introduction">
        Introduction
    </a>
</li> <li class="">
<a href="/uml/basic-principles-and-background/introduction-to-the-case-study">
        Introduction to the Case Study
    </a>
<ul class="">
<li class="">
<a href="/uml/basic-principles-and-background/introduction-to-the-case-study">
        Introduction to the Case Study
    </a>
</li> <li class="">
<a href="/uml/basic-principles-and-background/models-views-and-diagrams">
        Models, Views, and Diagrams
    </a>
</li> <li class="">
<a href="/uml/basic-principles-and-background/information-systems-and-it-systems">
        Information Systems and IT Systems
    </a>
</li> <li class="">
<a href="/uml/basic-principles-and-background/the-models-of-our-case-study">
        The Models of our Case Study
    </a>
</li> <li class="">
<a href="/uml/basic-principles-and-background/history-of-uml-methods-and-notations">
        History of UML: Methods and Notations
    </a>
</li> <li class="">
<a href="/uml/basic-principles-and-background/requirement-specification">
        Requirement Specification
    </a>
</li> <li class="">
<a href="/uml/basic-principles-and-background/uml2">
        UML 2.0
    </a>
</li> </ul>
</li> <li class="">
<a href="/uml/modeling-business-systems">
        Modeling Business Systems
    </a>
<ul class="">
<li class="">
<a href="/uml/modeling-business-systems/business-processes-and-business-systems">
        Business Processes and Business Systems
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/one-model-two-views">
        One Modelâ€”Two Views
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/external-view">
        External View
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/the-elements-of-view">
        The Elements of a View
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/external-view/use-case-diagrams">
        Use Case Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/external-view/constructing-use-case-diagrams">
        Constructing Use Case Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/external-view/activity-diagrams">
        Activity Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/external-view/constructing-activity-diagrams">
        Constructing Activity Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/external-view/sequence-diagrams">
        Sequence Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/external-view/constructing-sequence-diagrams">
        Constructing Sequence Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/external-view/high-level-sequence-diagrams">
        High-Level Sequence Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/external-view/sequence-diagrams-for-scenarios-of-business-use-cases">
        Sequence Diagrams for Scenarios of Business Use Cases
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/the-internal-view">
        Internal View
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/internal-view/package-diagram">
        Package Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/internal-view/constructing-package-diagrams">
        Constructing Package Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/internal-view/class-diagram">
        Class Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/internal-view/constructing-class-diagrams">
        Constructing Class Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-business-systems/internal-view/activity-diagram">
        Activity Diagram
    </a>
</li> </ul>
</li> <li class="">
<a href="/uml/modeling-it-systems">
        Modeling IT Systems
    </a>
<ul class="">
<li class="">
<a href="/uml/modeling-it-systems/external-view">
        External View
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/external-view/the-user-view-or-i-dont-care-how-it-works-as-long-as-it-works">
        The User View or "I don't care how it works, as long as it works."
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/external-view/the-elements-of-view">
        The Elements of a View
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/external-view/the-elements-of-view/use-case-diagram">
        Use Case Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/external-view/query-events-and-mutation-events">
        Query Events and Mutation Events
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/external-view/use-case-sequence-diagram">
        Use Case Sequence Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/external-view/constructing-the-external-view">
        Constructing the External View
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/structural-view">
        Structural View
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/structural-view/objects-and-classes">
        Objects and Classes
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/structural-view/generalization-specialization-and-inheritance">
        Generalization, Specialization, and Inheritance
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/structural-view/static-and-dynamic-business-rules">
        Static and Dynamic Business Rules
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/structural-view/elements-of-the-view">
        Elements of the View
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/structural-view/class-diagram">
        Class Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/structural-view/constructing-class-diagrams">
        Constructing Class Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/the-behavioral-view">
        The Behavioral View
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/the-behavioral-view/the-life-of-an-object">
        The Life of an Object
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/the-behavioral-view/the-elements-of-the-view">
        The Elements of the View
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/the-behavioral-view/statechart-diagram">
        Statechart Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/the-behavioral-view/constructing-statechart-diagrams">
        Constructing Statechart Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/interaction-view">
        Interaction View
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/interaction-view/seeing-what-happens-inside-the-it-system">
        Seeing What Happens Inside the IT System
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/interaction-view/elements-of-the-view">
        Elements of the View
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/interaction-view/communication-diagram">
        Communication Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/interaction-view/sequence-diagram">
        Sequence Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/interaction-view/constructing-communication-diagrams">
        Constructing Communication Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-it-systems/interaction-view/constructing-sequence-diagrams">
        Constructing Sequence Diagrams
    </a>
</li> </ul>
</li> <li class="">
<a href="/uml/modeling-for-system-integration">
        Modeling for System Integration
    </a>
<ul class="">
<li class="">
<a href="/uml/modeling-for-system-integration/terminology-of-system-integration">
        Terminology of System Integration
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/messages-in-uml">
        Messages in UML
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/one-model-two-views">
        One Modelâ€”Two Views
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/process-view">
        Process View
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/process-view/the-business-system-model-as-foundation">
        The Business System Model as Foundation
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/process-view/elements-of-the-view">
        Elements of the View
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/process-view/activity-diagrams">
        Activity Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/process-view/sequence-diagram">
        Sequence Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/process-view/constructing-diagrams-in-the-process-view">
        Constructing Diagrams in the Process View
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/the-static-view">
        The Static View
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/the-static-view/elements-of-the-view">
        Elements of the View
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/the-static-view/class-diagram">
        Class Diagram
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/the-static-view/constructing-class-diagrams">
        Constructing Class Diagrams
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/the-static-view/transforming-data-from-the-it-system-to-the-mess">
        Transforming Data from the IT System to the Message "passenger list"
    </a>
</li> <li class="">
<a href="/uml/modeling-for-system-integration/the-static-view/transformation-of-uml-messages-into-various-stan">
        Transformation of UML Messages into Various Standard Formats
    </a>
</li> </ul>
</li> </ul>
</li> </ul>
<div class="sidebar-controls">
<div class="sidebar-controls-container">
<a href="/home" title="Log in"><i class="fa fa-fw fa-fw fa-user"></i> Log in</a>
<a class="userecho-public" href="https://sourcemaking.userecho.com/" rel="nofollow" title="Feedback"><i aria-hidden="true" class="fa fa-fw fa-fw fa-envelope-o"></i> Feedback</a>
</div>
</div>
</div>
</aside>
<footer class="footer center-content">
<div class="footer-container center-content-container">
<div class="footer-inner container-fluid">
<div class="row">
<div class="col-xs-6">
<ul class="footer-list">
<li class="first expanded"><a href="/design_patterns">Design Patterns</a></li>
<li class="expanded"><a href="/antipatterns">AntiPatterns</a></li>
<li class="expanded"><a href="/refactoring">Refactoring</a></li>
<li class="last expanded"><a href="/uml">UML</a></li>
</ul>
</div>
<div class="col-xs-6">
<ul class="footer-list footer-links-right">
<li><a href="/home">My account</a></li>
<li><a class="userecho-public" href="https://sourcemaking.userecho.com/" rel="nofollow">Forum</a></li>
<li><a class="userecho-private" href="https://sourcemaking.userecho.com/?show_feedback_form_private=true" rel="nofollow">Contact
                                us</a></li>
<li><a href="/about-us">About us</a></li>
</ul>
</div>
</div>
</div>
</div>
<div class="copyright">
        Â© 2007-2016 <a href="/">SourceMaking.com</a><span class="hidden-sm-down"> / </span><br class="hidden-md-up">All rights reserved.
    </br></div>
</footer>
<script>
function extend() {
    var extended = {};
    var deep = false;
    var i = 0;
    var length = arguments.length;
    if ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {
        deep = arguments[0];
        i++;
    }
    var merge = function (obj) {
        for ( var prop in obj ) {
            if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {
                // If deep merge and property is an object, merge properties
                if ( deep && Object.prototype.toString.call(obj[prop]) === '[object Object]' ) {
                    extended[prop] = extend( true, extended[prop], obj[prop] );
                } else {
                    extended[prop] = obj[prop];
                }
            }
        }
    };
    for ( ; i < length; i++ ) {
        var obj = arguments[i];
        merge(obj);
    }
    return extended;
}
</script>
<script>
+function(script_defaults) {
    for (var property in script_defaults) {
        if (window[property] !== null && typeof window[property] === 'object') {
            window[property] = extend(true, window[property], script_defaults[property])
        }
        else {
            window[property] = script_defaults[property];
        }
    }
}({"user_echo_alias":"sourcemaking","user_echo_host":"sourcemaking.userecho.com","user_echo_private_forum":2,"user_echo_public_forum":1,"user_echo_sso_token":"","locale":"en","locale_prefix":""});
</script>
<script src="/build/js/public-0d57dabc53.min.js"></script>
<script async="" src="//www.google-analytics.com/analytics.js"></script>
<script>
    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
    ga('create', 'UA-521840-6', 'auto');
        ga('require', 'ec');
    ga('send', 'pageview');
</script>
</body>
</html><!-- Cached on 2016-09-01 19-07-26 -->

